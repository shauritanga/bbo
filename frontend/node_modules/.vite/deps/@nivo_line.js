import {
  C,
  Fr,
  H,
  In,
  It,
  Kt,
  Mn,
  Mt,
  O,
  On,
  Ot,
  P,
  Rn,
  Sn,
  Ur,
  Xe,
  _t,
  animated,
  area_default,
  band,
  g,
  gn,
  jn,
  k,
  line_default,
  linear,
  log,
  lt,
  point,
  pr,
  qn,
  require_Set,
  require_SetCache,
  require_Stack,
  require_arrayIncludes,
  require_arrayIncludesWith,
  require_arrayMap,
  require_baseFlatten,
  require_baseFor,
  require_baseGet,
  require_baseGetTag,
  require_baseIsEqual,
  require_baseRest,
  require_baseUnary,
  require_cacheHas,
  require_get,
  require_hasIn,
  require_identity,
  require_isArray,
  require_isArrayLike,
  require_isIterateeCall,
  require_isKey,
  require_isObject,
  require_isObjectLike,
  require_isSymbol,
  require_keys,
  require_last,
  require_nodeUtil,
  require_setToArray,
  require_toKey,
  require_toString,
  rn,
  symlog,
  time,
  useSpring,
  useTransition,
  utcTime,
  vn,
  w,
  wt,
  zt
} from "./chunk-WIDGZMEG.js";
import "./chunk-44UFIAHL.js";
import {
  require_jsx_runtime
} from "./chunk-KHN7SQKI.js";
import "./chunk-3GS3N7PG.js";
import {
  require_react
} from "./chunk-LL6ON2IQ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop() {
    }
    module.exports = noop;
  }
});

// node_modules/lodash/_createSet.js
var require_createSet = __commonJS({
  "node_modules/lodash/_createSet.js"(exports, module) {
    var Set2 = require_Set();
    var noop = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values) {
      return new Set2(values);
    };
    module.exports = createSet;
  }
});

// node_modules/lodash/_baseUniq.js
var require_baseUniq = __commonJS({
  "node_modules/lodash/_baseUniq.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array2, iteratee, comparator) {
      var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set2 = iteratee ? null : createSet(array2);
        if (set2) {
          return setToArray(set2);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index2 < length) {
          var value = array2[index2], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseUniq;
  }
});

// node_modules/lodash/uniq.js
var require_uniq = __commonJS({
  "node_modules/lodash/uniq.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniq(array2) {
      return array2 && array2.length ? baseUniq(array2) : [];
    }
    module.exports = uniq;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index2 = matchData.length, length = index2, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index2--) {
        var data = matchData[index2];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index2 < length) {
        data = matchData[index2];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/uniqBy.js
var require_uniqBy = __commonJS({
  "node_modules/lodash/uniqBy.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var baseUniq = require_baseUniq();
    function uniqBy(array2, iteratee) {
      return array2 && array2.length ? baseUniq(array2, baseIteratee(iteratee, 2)) : [];
    }
    module.exports = uniqBy;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports, module) {
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    module.exports = baseForOwn;
  }
});

// node_modules/lodash/_createBaseEach.js
var require_createBaseEach = __commonJS({
  "node_modules/lodash/_createBaseEach.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index2-- : ++index2 < length) {
          if (iteratee(iterable[index2], index2, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    module.exports = createBaseEach;
  }
});

// node_modules/lodash/_baseEach.js
var require_baseEach = __commonJS({
  "node_modules/lodash/_baseEach.js"(exports, module) {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module.exports = baseEach;
  }
});

// node_modules/lodash/_baseMap.js
var require_baseMap = __commonJS({
  "node_modules/lodash/_baseMap.js"(exports, module) {
    var baseEach = require_baseEach();
    var isArrayLike = require_isArrayLike();
    function baseMap(collection, iteratee) {
      var index2 = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection2) {
        result[++index2] = iteratee(value, key, collection2);
      });
      return result;
    }
    module.exports = baseMap;
  }
});

// node_modules/lodash/_baseSortBy.js
var require_baseSortBy = __commonJS({
  "node_modules/lodash/_baseSortBy.js"(exports, module) {
    function baseSortBy(array2, comparer) {
      var length = array2.length;
      array2.sort(comparer);
      while (length--) {
        array2[length] = array2[length].value;
      }
      return array2;
    }
    module.exports = baseSortBy;
  }
});

// node_modules/lodash/_compareAscending.js
var require_compareAscending = __commonJS({
  "node_modules/lodash/_compareAscending.js"(exports, module) {
    var isSymbol = require_isSymbol();
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
        var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    module.exports = compareAscending;
  }
});

// node_modules/lodash/_compareMultiple.js
var require_compareMultiple = __commonJS({
  "node_modules/lodash/_compareMultiple.js"(exports, module) {
    var compareAscending = require_compareAscending();
    function compareMultiple(object, other, orders) {
      var index2 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
      while (++index2 < length) {
        var result = compareAscending(objCriteria[index2], othCriteria[index2]);
        if (result) {
          if (index2 >= ordersLength) {
            return result;
          }
          var order = orders[index2];
          return result * (order == "desc" ? -1 : 1);
        }
      }
      return object.index - other.index;
    }
    module.exports = compareMultiple;
  }
});

// node_modules/lodash/_baseOrderBy.js
var require_baseOrderBy = __commonJS({
  "node_modules/lodash/_baseOrderBy.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseGet = require_baseGet();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var baseSortBy = require_baseSortBy();
    var baseUnary = require_baseUnary();
    var compareMultiple = require_compareMultiple();
    var identity = require_identity();
    var isArray = require_isArray();
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            };
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }
      var index2 = -1;
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
      var result = baseMap(collection, function(value, key, collection2) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { "criteria": criteria, "index": ++index2, "value": value };
      });
      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    module.exports = baseOrderBy;
  }
});

// node_modules/lodash/sortBy.js
var require_sortBy = __commonJS({
  "node_modules/lodash/sortBy.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    var baseOrderBy = require_baseOrderBy();
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });
    module.exports = sortBy;
  }
});

// node_modules/lodash/_baseIsDate.js
var require_baseIsDate = __commonJS({
  "node_modules/lodash/_baseIsDate.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var dateTag = "[object Date]";
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }
    module.exports = baseIsDate;
  }
});

// node_modules/lodash/isDate.js
var require_isDate = __commonJS({
  "node_modules/lodash/isDate.js"(exports, module) {
    var baseIsDate = require_baseIsDate();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsDate = nodeUtil && nodeUtil.isDate;
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    module.exports = isDate;
  }
});

// node_modules/lodash/uniqueId.js
var require_uniqueId = __commonJS({
  "node_modules/lodash/uniqueId.js"(exports, module) {
    var toString = require_toString();
    var idCounter = 0;
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }
    module.exports = uniqueId;
  }
});

// node_modules/@nivo/line/dist/nivo-line.es.js
var import_react3 = __toESM(require_react());

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var t2 = __toESM(require_react());
var import_react = __toESM(require_react());

// node_modules/@nivo/axes/node_modules/d3-time/src/interval.js
var t0 = /* @__PURE__ */ new Date();
var t1 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count2, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count2) {
    interval.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count2(t0, t1));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/axes/node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});
millisecond.every = function(k3) {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0))
    return null;
  if (!(k3 > 1))
    return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k3) * k3);
  }, function(date, step) {
    date.setTime(+date + step * k3);
  }, function(start, end) {
    return (end - start) / k3;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/@nivo/axes/node_modules/d3-time/src/second.js
var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/minute.js
var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/hour.js
var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/day.js
var day = newInterval(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date) => date.getDate() - 1
);
var day_default = day;
var days = day.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/week.js
function weekday(i4) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i4) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/month.js
var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/year.js
var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k3) * k3);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k3);
  });
};
var year_default = year;
var years = year.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i4) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i4) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// node_modules/@nivo/axes/node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k3) * k3);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k3);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// node_modules/@nivo/axes/node_modules/d3-array/src/ascending.js
function ascending_default(a3, b3) {
  return a3 < b3 ? -1 : a3 > b3 ? 1 : a3 >= b3 ? 0 : NaN;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/bisector.js
function bisector_default(f) {
  let delta = f;
  let compare = f;
  if (f.length === 1) {
    delta = (d, x) => f(d) - x;
    compare = ascendingComparator(f);
  }
  function left(a3, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a3.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a3[mid], x) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a3, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a3.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a3[mid], x) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a3, x, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a3.length;
    const i4 = left(a3, x, lo, hi - 1);
    return i4 > lo && delta(a3[i4 - 1], x) > -delta(a3[i4], x) ? i4 - 1 : i4;
  }
  return { left, center, right };
}
function ascendingComparator(f) {
  return (d, x) => ascending_default(f(d), x);
}

// node_modules/@nivo/axes/node_modules/d3-array/src/number.js
function number_default(x) {
  return x === null ? NaN : +x;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default).center;

// node_modules/@nivo/axes/node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/@nivo/axes/node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickStep(start, stop, count2) {
  var step0 = Math.abs(stop - start) / Math.max(0, count2), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}

// node_modules/@nivo/axes/node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array2, i0 = 0, i1 = array2.length) {
    let m2 = i1 - (i0 = +i0);
    while (m2) {
      const i4 = random() * m2-- | 0, t5 = array2[m2 + i0];
      array2[m2 + i0] = array2[i4 + i0];
      array2[i4 + i0] = t5;
    }
    return array2;
  };
}

// node_modules/@nivo/axes/node_modules/d3-time/src/ticks.js
function ticker(year3, month3, week, day3, hour3, minute3) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute3, 1, durationMinute],
    [minute3, 5, 5 * durationMinute],
    [minute3, 15, 15 * durationMinute],
    [minute3, 30, 30 * durationMinute],
    [hour3, 1, durationHour],
    [hour3, 3, 3 * durationHour],
    [hour3, 6, 6 * durationHour],
    [hour3, 12, 12 * durationHour],
    [day3, 1, durationDay],
    [day3, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month3, 1, durationMonth],
    [month3, 3, 3 * durationMonth],
    [year3, 1, durationYear]
  ];
  function ticks(start, stop, count2) {
    const reverse2 = stop < start;
    if (reverse2)
      [start, stop] = [stop, start];
    const interval = count2 && typeof count2.range === "function" ? count2 : tickInterval(start, stop, count2);
    const ticks2 = interval ? interval.range(start, +stop + 1) : [];
    return reverse2 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start, stop, count2) {
    const target = Math.abs(stop - start) / count2;
    const i4 = bisector_default(([, , step2]) => step2).right(tickIntervals, target);
    if (i4 === tickIntervals.length)
      return year3.every(tickStep(start / durationYear, stop / durationYear, count2));
    if (i4 === 0)
      return millisecond_default.every(Math.max(tickStep(start, stop, count2), 1));
    const [t5, step] = tickIntervals[target / tickIntervals[i4 - 1][2] < tickIntervals[i4][2] / target ? i4 - 1 : i4];
    return t5.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

// node_modules/@nivo/axes/node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y, m2, d) {
  return { y, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale4) {
  var locale_dateTime = locale4.dateTime, locale_date = locale4.date, locale_time = locale4.time, locale_periods = locale4.periods, locale_weekdays = locale4.days, locale_shortWeekdays = locale4.shortDays, locale_months = locale4.months, locale_shortMonths = locale4.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i4 = -1, j2 = 0, n5 = specifier.length, c, pad3, format2;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i4 < n5) {
        if (specifier.charCodeAt(i4) === 37) {
          string.push(specifier.slice(j2, i4));
          if ((pad3 = pads[c = specifier.charAt(++i4)]) != null)
            c = specifier.charAt(++i4);
          else
            pad3 = c === "e" ? " " : "0";
          if (format2 = formats2[c])
            c = format2(date, pad3);
          string.push(c);
          j2 = i4 + 1;
        }
      }
      string.push(specifier.slice(j2, i4));
      return string.join("");
    };
  }
  function newParse(specifier, Z2) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i4 = parseSpecifier(d, specifier, string += "", 0), week, day3;
      if (i4 != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z2 && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day3 = week.getUTCDay();
          week = day3 > 4 || day3 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day3 = week.getDay();
          week = day3 > 4 || day3 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day3 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day3 + 5) % 7 : d.w + d.U * 7 - (day3 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j2) {
    var i4 = 0, n5 = specifier.length, m2 = string.length, c, parse;
    while (i4 < n5) {
      if (j2 >= m2)
        return -1;
      c = specifier.charCodeAt(i4++);
      if (c === 37) {
        c = specifier.charAt(i4++);
        parse = parses[c in pads ? specifier.charAt(i4++) : c];
        if (!parse || (j2 = parse(d, string, j2)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j2++)) {
        return -1;
      }
    }
    return j2;
  }
  function parsePeriod(d, string, i4) {
    var n5 = periodRe.exec(string.slice(i4));
    return n5 ? (d.p = periodLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseShortWeekday(d, string, i4) {
    var n5 = shortWeekdayRe.exec(string.slice(i4));
    return n5 ? (d.w = shortWeekdayLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseWeekday(d, string, i4) {
    var n5 = weekdayRe.exec(string.slice(i4));
    return n5 ? (d.w = weekdayLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseShortMonth(d, string, i4) {
    var n5 = shortMonthRe.exec(string.slice(i4));
    return n5 ? (d.m = shortMonthLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseMonth(d, string, i4) {
    var n5 = monthRe.exec(string.slice(i4));
    return n5 ? (d.m = monthLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i4) {
    return parseSpecifier(d, locale_dateTime, string, i4);
  }
  function parseLocaleDate(d, string, i4) {
    return parseSpecifier(d, locale_date, string, i4);
  }
  function parseLocaleTime(d, string, i4) {
    return parseSpecifier(d, locale_time, string, i4);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i4) => [name.toLowerCase(), i4]));
}
function parseWeekdayNumberSunday(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 1));
  return n5 ? (d.w = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 1));
  return n5 ? (d.u = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.U = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekNumberISO(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.V = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.W = +n5[0], i4 + n5[0].length) : -1;
}
function parseFullYear(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 4));
  return n5 ? (d.y = +n5[0], i4 + n5[0].length) : -1;
}
function parseYear(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.y = +n5[0] + (+n5[0] > 68 ? 1900 : 2e3), i4 + n5[0].length) : -1;
}
function parseZone(d, string, i4) {
  var n5 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i4, i4 + 6));
  return n5 ? (d.Z = n5[1] ? 0 : -(n5[2] + (n5[3] || "00")), i4 + n5[0].length) : -1;
}
function parseQuarter(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 1));
  return n5 ? (d.q = n5[0] * 3 - 3, i4 + n5[0].length) : -1;
}
function parseMonthNumber(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.m = n5[0] - 1, i4 + n5[0].length) : -1;
}
function parseDayOfMonth(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.d = +n5[0], i4 + n5[0].length) : -1;
}
function parseDayOfYear(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 3));
  return n5 ? (d.m = 0, d.d = +n5[0], i4 + n5[0].length) : -1;
}
function parseHour24(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.H = +n5[0], i4 + n5[0].length) : -1;
}
function parseMinutes(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.M = +n5[0], i4 + n5[0].length) : -1;
}
function parseSeconds(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.S = +n5[0], i4 + n5[0].length) : -1;
}
function parseMilliseconds(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 3));
  return n5 ? (d.L = +n5[0], i4 + n5[0].length) : -1;
}
function parseMicroseconds(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4, i4 + 6));
  return n5 ? (d.L = Math.floor(n5[0] / 1e3), i4 + n5[0].length) : -1;
}
function parseLiteralPercent(d, string, i4) {
  var n5 = percentRe.exec(string.slice(i4, i4 + 1));
  return n5 ? i4 + n5[0].length : -1;
}
function parseUnixTimestamp(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4));
  return n5 ? (d.Q = +n5[0], i4 + n5[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i4) {
  var n5 = numberRe.exec(string.slice(i4));
  return n5 ? (d.s = +n5[0], i4 + n5[0].length) : -1;
}
function formatDayOfMonth(d, p2) {
  return pad(d.getDate(), p2, 2);
}
function formatHour24(d, p2) {
  return pad(d.getHours(), p2, 2);
}
function formatHour12(d, p2) {
  return pad(d.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d, p2) {
  return pad(1 + day_default.count(year_default(d), d), p2, 3);
}
function formatMilliseconds(d, p2) {
  return pad(d.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d, p2) {
  return formatMilliseconds(d, p2) + "000";
}
function formatMonthNumber(d, p2) {
  return pad(d.getMonth() + 1, p2, 2);
}
function formatMinutes(d, p2) {
  return pad(d.getMinutes(), p2, 2);
}
function formatSeconds(d, p2) {
  return pad(d.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d) {
  var day3 = d.getDay();
  return day3 === 0 ? 7 : day3;
}
function formatWeekNumberSunday(d, p2) {
  return pad(sunday.count(year_default(d) - 1, d), p2, 2);
}
function dISO(d) {
  var day3 = d.getDay();
  return day3 >= 4 || day3 === 0 ? thursday(d) : thursday.ceil(d);
}
function formatWeekNumberISO(d, p2) {
  d = dISO(d);
  return pad(thursday.count(year_default(d), d) + (year_default(d).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p2) {
  return pad(monday.count(year_default(d) - 1, d), p2, 2);
}
function formatYear(d, p2) {
  return pad(d.getFullYear() % 100, p2, 2);
}
function formatYearISO(d, p2) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p2, 2);
}
function formatFullYear(d, p2) {
  return pad(d.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d, p2) {
  var day3 = d.getDay();
  d = day3 >= 4 || day3 === 0 ? thursday(d) : thursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p2, 4);
}
function formatZone(d) {
  var z4 = d.getTimezoneOffset();
  return (z4 > 0 ? "-" : (z4 *= -1, "+")) + pad(z4 / 60 | 0, "0", 2) + pad(z4 % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p2) {
  return pad(d.getUTCDate(), p2, 2);
}
function formatUTCHour24(d, p2) {
  return pad(d.getUTCHours(), p2, 2);
}
function formatUTCHour12(d, p2) {
  return pad(d.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d, p2) {
  return pad(1 + utcDay_default.count(utcYear_default(d), d), p2, 3);
}
function formatUTCMilliseconds(d, p2) {
  return pad(d.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d, p2) {
  return formatUTCMilliseconds(d, p2) + "000";
}
function formatUTCMonthNumber(d, p2) {
  return pad(d.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d, p2) {
  return pad(d.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d, p2) {
  return pad(d.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p2) {
  return pad(utcSunday.count(utcYear_default(d) - 1, d), p2, 2);
}
function UTCdISO(d) {
  var day3 = d.getUTCDay();
  return day3 >= 4 || day3 === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p2) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear_default(d), d) + (utcYear_default(d).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p2) {
  return pad(utcMonday.count(utcYear_default(d) - 1, d), p2, 2);
}
function formatUTCYear(d, p2) {
  return pad(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d, p2) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d, p2) {
  return pad(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d, p2) {
  var day3 = d.getUTCDay();
  d = day3 >= 4 || day3 === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/@nivo/axes/node_modules/d3-time-format/src/defaultLocale.js
var locale;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  timeFormat = locale.format;
  timeParse = locale.parse;
  utcFormat = locale.utcFormat;
  utcParse = locale.utcParse;
  return locale;
}

// node_modules/@nivo/axes/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/@nivo/axes/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/@nivo/axes/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p2) {
  if ((i4 = (x = p2 ? x.toExponential(p2 - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i4, coefficient = x.slice(0, i4);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i4 + 1)
  ];
}

// node_modules/@nivo/axes/node_modules/d3-format/src/exponent.js
function exponent_default(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i4 = value.length, t5 = [], j2 = 0, g3 = grouping[0], length = 0;
    while (i4 > 0 && g3 > 0) {
      if (length + g3 + 1 > width)
        g3 = Math.max(1, width - length);
      t5.push(value.substring(i4 -= g3, i4 + g3));
      if ((length += g3 + 1) > width)
        break;
      g3 = grouping[j2 = (j2 + 1) % grouping.length];
    }
    return t5.reverse().join(thousands);
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i4) {
      return numerals[+i4];
    });
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/@nivo/axes/node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out:
    for (var n5 = s2.length, i4 = 1, i0 = -1, i1; i4 < n5; ++i4) {
      switch (s2[i4]) {
        case ".":
          i0 = i1 = i4;
          break;
        case "0":
          if (i0 === 0)
            i0 = i4;
          i1 = i4;
          break;
        default:
          if (!+s2[i4])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x, p2) {
  var d = formatDecimalParts(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1], i4 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n5 = coefficient.length;
  return i4 === n5 ? coefficient : i4 > n5 ? coefficient + new Array(i4 - n5 + 1).join("0") : i4 > 0 ? coefficient.slice(0, i4) + "." + coefficient.slice(i4) : "0." + new Array(1 - i4).join("0") + formatDecimalParts(x, Math.max(0, p2 + i4 - 1))[0];
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x, p2) {
  var d = formatDecimalParts(x, p2);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/@nivo/axes/node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": function(x, p2) {
    return (x * 100).toFixed(p2);
  },
  "b": function(x) {
    return Math.round(x).toString(2);
  },
  "c": function(x) {
    return x + "";
  },
  "d": formatDecimal_default,
  "e": function(x, p2) {
    return x.toExponential(p2);
  },
  "f": function(x, p2) {
    return x.toFixed(p2);
  },
  "g": function(x, p2) {
    return x.toPrecision(p2);
  },
  "o": function(x) {
    return Math.round(x).toString(8);
  },
  "p": function(x, p2) {
    return formatRounded_default(x * 100, p2);
  },
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": function(x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function(x) {
    return Math.round(x).toString(16);
  }
};

// node_modules/@nivo/axes/node_modules/d3-format/src/identity.js
function identity_default2(x) {
  return x;
}

// node_modules/@nivo/axes/node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale4) {
  var group2 = locale4.grouping === void 0 || locale4.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale4.grouping, Number), locale4.thousands + ""), currencyPrefix = locale4.currency === void 0 ? "" : locale4.currency[0] + "", currencySuffix = locale4.currency === void 0 ? "" : locale4.currency[1] + "", decimal = locale4.decimal === void 0 ? "." : locale4.decimal + "", numerals = locale4.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale4.numerals, String)), percent = locale4.percent === void 0 ? "%" : locale4.percent + "", minus = locale4.minus === void 0 ? "-" : locale4.minus + "", nan = locale4.nan === void 0 ? "NaN" : locale4.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero || fill === "0" && align === "=")
      zero = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i4, n5, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i4 = -1, n5 = value.length;
          while (++i4 < n5) {
            if (c = value.charCodeAt(i4), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i4 + 1) : value.slice(i4)) + valueSuffix;
              value = value.slice(0, i4);
              break;
            }
          }
        }
      }
      if (comma && !zero)
        value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e7 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k3 = Math.pow(10, -e7), prefix = prefixes[8 + e7 / 3];
    return function(value2) {
      return f(k3 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/@nivo/axes/node_modules/d3-format/src/defaultLocale.js
var locale2;
var format;
var formatPrefix;
defaultLocale2({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale2(definition) {
  locale2 = locale_default(definition);
  format = locale2.format;
  formatPrefix = locale2.formatPrefix;
  return locale2;
}

// node_modules/@nivo/scales/dist/nivo-scales.es.js
var import_uniq = __toESM(require_uniq());
var import_uniqBy = __toESM(require_uniqBy());
var import_sortBy = __toESM(require_sortBy());
var import_last = __toESM(require_last());
var import_isDate = __toESM(require_isDate());

// node_modules/@nivo/scales/node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function newInterval2(floori, offseti, count2, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = function(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };
  interval.filter = function(test) {
    return newInterval2(function(date) {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count2) {
    interval.count = function(start, end) {
      t02.setTime(+start), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count2(t02, t12));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/@nivo/scales/node_modules/d3-time/src/millisecond.js
var millisecond2 = newInterval2(function() {
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});
millisecond2.every = function(k3) {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0))
    return null;
  if (!(k3 > 1))
    return millisecond2;
  return newInterval2(function(date) {
    date.setTime(Math.floor(date / k3) * k3);
  }, function(date, step) {
    date.setTime(+date + step * k3);
  }, function(start, end) {
    return (end - start) / k3;
  });
};
var millisecond_default2 = millisecond2;
var milliseconds2 = millisecond2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/duration.js
var durationSecond2 = 1e3;
var durationMinute2 = 6e4;
var durationHour2 = 36e5;
var durationDay2 = 864e5;
var durationWeek2 = 6048e5;

// node_modules/@nivo/scales/node_modules/d3-time/src/second.js
var second2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond2);
}, function(start, end) {
  return (end - start) / durationSecond2;
}, function(date) {
  return date.getUTCSeconds();
});
var second_default2 = second2;
var seconds2 = second2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/minute.js
var minute2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start, end) {
  return (end - start) / durationMinute2;
}, function(date) {
  return date.getMinutes();
});
var minute_default2 = minute2;
var minutes2 = minute2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/hour.js
var hour2 = newInterval2(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond2 - date.getMinutes() * durationMinute2);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start, end) {
  return (end - start) / durationHour2;
}, function(date) {
  return date.getHours();
});
var hour_default2 = hour2;
var hours2 = hour2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/day.js
var day2 = newInterval2(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute2) / durationDay2;
}, function(date) {
  return date.getDate() - 1;
});
var day_default2 = day2;
var days2 = day2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/week.js
function weekday2(i4) {
  return newInterval2(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i4) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute2) / durationWeek2;
  });
}
var sunday2 = weekday2(0);
var monday2 = weekday2(1);
var tuesday2 = weekday2(2);
var wednesday2 = weekday2(3);
var thursday2 = weekday2(4);
var friday2 = weekday2(5);
var saturday2 = weekday2(6);
var sundays2 = sunday2.range;
var mondays2 = monday2.range;
var tuesdays2 = tuesday2.range;
var wednesdays2 = wednesday2.range;
var thursdays2 = thursday2.range;
var fridays2 = friday2.range;
var saturdays2 = saturday2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/month.js
var month2 = newInterval2(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var month_default2 = month2;
var months2 = month2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/year.js
var year2 = newInterval2(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});
year2.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval2(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k3) * k3);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k3);
  });
};
var year_default2 = year2;
var years2 = year2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcMinute.js
var utcMinute2 = newInterval2(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute2);
}, function(start, end) {
  return (end - start) / durationMinute2;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinute_default2 = utcMinute2;
var utcMinutes2 = utcMinute2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcHour.js
var utcHour2 = newInterval2(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour2);
}, function(start, end) {
  return (end - start) / durationHour2;
}, function(date) {
  return date.getUTCHours();
});
var utcHour_default2 = utcHour2;
var utcHours2 = utcHour2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcDay.js
var utcDay2 = newInterval2(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay2;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDay_default2 = utcDay2;
var utcDays2 = utcDay2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcWeek.js
function utcWeekday2(i4) {
  return newInterval2(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i4) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek2;
  });
}
var utcSunday2 = utcWeekday2(0);
var utcMonday2 = utcWeekday2(1);
var utcTuesday2 = utcWeekday2(2);
var utcWednesday2 = utcWeekday2(3);
var utcThursday2 = utcWeekday2(4);
var utcFriday2 = utcWeekday2(5);
var utcSaturday2 = utcWeekday2(6);
var utcSundays2 = utcSunday2.range;
var utcMondays2 = utcMonday2.range;
var utcTuesdays2 = utcTuesday2.range;
var utcWednesdays2 = utcWednesday2.range;
var utcThursdays2 = utcThursday2.range;
var utcFridays2 = utcFriday2.range;
var utcSaturdays2 = utcSaturday2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcMonth.js
var utcMonth2 = newInterval2(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonth_default2 = utcMonth2;
var utcMonths2 = utcMonth2.range;

// node_modules/@nivo/scales/node_modules/d3-time/src/utcYear.js
var utcYear2 = newInterval2(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});
utcYear2.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval2(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k3) * k3);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k3);
  });
};
var utcYear_default2 = utcYear2;
var utcYears2 = utcYear2.range;

// node_modules/@nivo/scales/node_modules/d3-time-format/src/locale.js
function localDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate2(y, m2, d) {
  return { y, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale2(locale4) {
  var locale_dateTime = locale4.dateTime, locale_date = locale4.date, locale_time = locale4.time, locale_periods = locale4.periods, locale_weekdays = locale4.days, locale_shortWeekdays = locale4.shortDays, locale_months = locale4.months, locale_shortMonths = locale4.shortMonths;
  var periodRe = formatRe2(locale_periods), periodLookup = formatLookup2(locale_periods), weekdayRe = formatRe2(locale_weekdays), weekdayLookup = formatLookup2(locale_weekdays), shortWeekdayRe = formatRe2(locale_shortWeekdays), shortWeekdayLookup = formatLookup2(locale_shortWeekdays), monthRe = formatRe2(locale_months), monthLookup = formatLookup2(locale_months), shortMonthRe = formatRe2(locale_shortMonths), shortMonthLookup = formatLookup2(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth2,
    "e": formatDayOfMonth2,
    "f": formatMicroseconds2,
    "g": formatYearISO2,
    "G": formatFullYearISO2,
    "H": formatHour242,
    "I": formatHour122,
    "j": formatDayOfYear2,
    "L": formatMilliseconds2,
    "m": formatMonthNumber2,
    "M": formatMinutes2,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatSeconds2,
    "u": formatWeekdayNumberMonday2,
    "U": formatWeekNumberSunday2,
    "V": formatWeekNumberISO2,
    "w": formatWeekdayNumberSunday2,
    "W": formatWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear2,
    "Z": formatZone2,
    "%": formatLiteralPercent2
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth2,
    "e": formatUTCDayOfMonth2,
    "f": formatUTCMicroseconds2,
    "g": formatUTCYearISO2,
    "G": formatUTCFullYearISO2,
    "H": formatUTCHour242,
    "I": formatUTCHour122,
    "j": formatUTCDayOfYear2,
    "L": formatUTCMilliseconds2,
    "m": formatUTCMonthNumber2,
    "M": formatUTCMinutes2,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp2,
    "s": formatUnixTimestampSeconds2,
    "S": formatUTCSeconds2,
    "u": formatUTCWeekdayNumberMonday2,
    "U": formatUTCWeekNumberSunday2,
    "V": formatUTCWeekNumberISO2,
    "w": formatUTCWeekdayNumberSunday2,
    "W": formatUTCWeekNumberMonday2,
    "x": null,
    "X": null,
    "y": formatUTCYear2,
    "Y": formatUTCFullYear2,
    "Z": formatUTCZone2,
    "%": formatLiteralPercent2
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth2,
    "e": parseDayOfMonth2,
    "f": parseMicroseconds2,
    "g": parseYear2,
    "G": parseFullYear2,
    "H": parseHour242,
    "I": parseHour242,
    "j": parseDayOfYear2,
    "L": parseMilliseconds2,
    "m": parseMonthNumber2,
    "M": parseMinutes2,
    "p": parsePeriod,
    "q": parseQuarter2,
    "Q": parseUnixTimestamp2,
    "s": parseUnixTimestampSeconds2,
    "S": parseSeconds2,
    "u": parseWeekdayNumberMonday2,
    "U": parseWeekNumberSunday2,
    "V": parseWeekNumberISO2,
    "w": parseWeekdayNumberSunday2,
    "W": parseWeekNumberMonday2,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear2,
    "Y": parseFullYear2,
    "Z": parseZone2,
    "%": parseLiteralPercent2
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i4 = -1, j2 = 0, n5 = specifier.length, c, pad3, format2;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i4 < n5) {
        if (specifier.charCodeAt(i4) === 37) {
          string.push(specifier.slice(j2, i4));
          if ((pad3 = pads2[c = specifier.charAt(++i4)]) != null)
            c = specifier.charAt(++i4);
          else
            pad3 = c === "e" ? " " : "0";
          if (format2 = formats2[c])
            c = format2(date, pad3);
          string.push(c);
          j2 = i4 + 1;
        }
      }
      string.push(specifier.slice(j2, i4));
      return string.join("");
    };
  }
  function newParse(specifier, Z2) {
    return function(string) {
      var d = newDate2(1900, void 0, 1), i4 = parseSpecifier(d, specifier, string += "", 0), week, day3;
      if (i4 != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z2 && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week = utcDate2(newDate2(d.y, 0, 1)), day3 = week.getUTCDay();
          week = day3 > 4 || day3 === 0 ? utcMonday2.ceil(week) : utcMonday2(week);
          week = utcDay_default2.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate2(newDate2(d.y, 0, 1)), day3 = week.getDay();
          week = day3 > 4 || day3 === 0 ? monday2.ceil(week) : monday2(week);
          week = day_default2.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day3 = "Z" in d ? utcDate2(newDate2(d.y, 0, 1)).getUTCDay() : localDate2(newDate2(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day3 + 5) % 7 : d.w + d.U * 7 - (day3 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate2(d);
      }
      return localDate2(d);
    };
  }
  function parseSpecifier(d, specifier, string, j2) {
    var i4 = 0, n5 = specifier.length, m2 = string.length, c, parse;
    while (i4 < n5) {
      if (j2 >= m2)
        return -1;
      c = specifier.charCodeAt(i4++);
      if (c === 37) {
        c = specifier.charAt(i4++);
        parse = parses[c in pads2 ? specifier.charAt(i4++) : c];
        if (!parse || (j2 = parse(d, string, j2)) < 0)
          return -1;
      } else if (c != string.charCodeAt(j2++)) {
        return -1;
      }
    }
    return j2;
  }
  function parsePeriod(d, string, i4) {
    var n5 = periodRe.exec(string.slice(i4));
    return n5 ? (d.p = periodLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseShortWeekday(d, string, i4) {
    var n5 = shortWeekdayRe.exec(string.slice(i4));
    return n5 ? (d.w = shortWeekdayLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseWeekday(d, string, i4) {
    var n5 = weekdayRe.exec(string.slice(i4));
    return n5 ? (d.w = weekdayLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseShortMonth(d, string, i4) {
    var n5 = shortMonthRe.exec(string.slice(i4));
    return n5 ? (d.m = shortMonthLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseMonth(d, string, i4) {
    var n5 = monthRe.exec(string.slice(i4));
    return n5 ? (d.m = monthLookup.get(n5[0].toLowerCase()), i4 + n5[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i4) {
    return parseSpecifier(d, locale_dateTime, string, i4);
  }
  function parseLocaleDate(d, string, i4) {
    return parseSpecifier(d, locale_date, string, i4);
  }
  function parseLocaleTime(d, string, i4) {
    return parseSpecifier(d, locale_time, string, i4);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads2 = { "-": "", "_": " ", "0": "0" };
var numberRe2 = /^\s*\d+/;
var percentRe2 = /^%/;
var requoteRe2 = /[\\^$*+?|[\]().{}]/g;
function pad2(value, fill, width) {
  var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote2(s2) {
  return s2.replace(requoteRe2, "\\$&");
}
function formatRe2(names) {
  return new RegExp("^(?:" + names.map(requote2).join("|") + ")", "i");
}
function formatLookup2(names) {
  return new Map(names.map((name, i4) => [name.toLowerCase(), i4]));
}
function parseWeekdayNumberSunday2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 1));
  return n5 ? (d.w = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekdayNumberMonday2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 1));
  return n5 ? (d.u = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekNumberSunday2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.U = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekNumberISO2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.V = +n5[0], i4 + n5[0].length) : -1;
}
function parseWeekNumberMonday2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.W = +n5[0], i4 + n5[0].length) : -1;
}
function parseFullYear2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 4));
  return n5 ? (d.y = +n5[0], i4 + n5[0].length) : -1;
}
function parseYear2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.y = +n5[0] + (+n5[0] > 68 ? 1900 : 2e3), i4 + n5[0].length) : -1;
}
function parseZone2(d, string, i4) {
  var n5 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i4, i4 + 6));
  return n5 ? (d.Z = n5[1] ? 0 : -(n5[2] + (n5[3] || "00")), i4 + n5[0].length) : -1;
}
function parseQuarter2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 1));
  return n5 ? (d.q = n5[0] * 3 - 3, i4 + n5[0].length) : -1;
}
function parseMonthNumber2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.m = n5[0] - 1, i4 + n5[0].length) : -1;
}
function parseDayOfMonth2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.d = +n5[0], i4 + n5[0].length) : -1;
}
function parseDayOfYear2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 3));
  return n5 ? (d.m = 0, d.d = +n5[0], i4 + n5[0].length) : -1;
}
function parseHour242(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.H = +n5[0], i4 + n5[0].length) : -1;
}
function parseMinutes2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.M = +n5[0], i4 + n5[0].length) : -1;
}
function parseSeconds2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 2));
  return n5 ? (d.S = +n5[0], i4 + n5[0].length) : -1;
}
function parseMilliseconds2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 3));
  return n5 ? (d.L = +n5[0], i4 + n5[0].length) : -1;
}
function parseMicroseconds2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4, i4 + 6));
  return n5 ? (d.L = Math.floor(n5[0] / 1e3), i4 + n5[0].length) : -1;
}
function parseLiteralPercent2(d, string, i4) {
  var n5 = percentRe2.exec(string.slice(i4, i4 + 1));
  return n5 ? i4 + n5[0].length : -1;
}
function parseUnixTimestamp2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4));
  return n5 ? (d.Q = +n5[0], i4 + n5[0].length) : -1;
}
function parseUnixTimestampSeconds2(d, string, i4) {
  var n5 = numberRe2.exec(string.slice(i4));
  return n5 ? (d.s = +n5[0], i4 + n5[0].length) : -1;
}
function formatDayOfMonth2(d, p2) {
  return pad2(d.getDate(), p2, 2);
}
function formatHour242(d, p2) {
  return pad2(d.getHours(), p2, 2);
}
function formatHour122(d, p2) {
  return pad2(d.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear2(d, p2) {
  return pad2(1 + day_default2.count(year_default2(d), d), p2, 3);
}
function formatMilliseconds2(d, p2) {
  return pad2(d.getMilliseconds(), p2, 3);
}
function formatMicroseconds2(d, p2) {
  return formatMilliseconds2(d, p2) + "000";
}
function formatMonthNumber2(d, p2) {
  return pad2(d.getMonth() + 1, p2, 2);
}
function formatMinutes2(d, p2) {
  return pad2(d.getMinutes(), p2, 2);
}
function formatSeconds2(d, p2) {
  return pad2(d.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday2(d) {
  var day3 = d.getDay();
  return day3 === 0 ? 7 : day3;
}
function formatWeekNumberSunday2(d, p2) {
  return pad2(sunday2.count(year_default2(d) - 1, d), p2, 2);
}
function dISO2(d) {
  var day3 = d.getDay();
  return day3 >= 4 || day3 === 0 ? thursday2(d) : thursday2.ceil(d);
}
function formatWeekNumberISO2(d, p2) {
  d = dISO2(d);
  return pad2(thursday2.count(year_default2(d), d) + (year_default2(d).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday2(d) {
  return d.getDay();
}
function formatWeekNumberMonday2(d, p2) {
  return pad2(monday2.count(year_default2(d) - 1, d), p2, 2);
}
function formatYear2(d, p2) {
  return pad2(d.getFullYear() % 100, p2, 2);
}
function formatYearISO2(d, p2) {
  d = dISO2(d);
  return pad2(d.getFullYear() % 100, p2, 2);
}
function formatFullYear2(d, p2) {
  return pad2(d.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO2(d, p2) {
  var day3 = d.getDay();
  d = day3 >= 4 || day3 === 0 ? thursday2(d) : thursday2.ceil(d);
  return pad2(d.getFullYear() % 1e4, p2, 4);
}
function formatZone2(d) {
  var z4 = d.getTimezoneOffset();
  return (z4 > 0 ? "-" : (z4 *= -1, "+")) + pad2(z4 / 60 | 0, "0", 2) + pad2(z4 % 60, "0", 2);
}
function formatUTCDayOfMonth2(d, p2) {
  return pad2(d.getUTCDate(), p2, 2);
}
function formatUTCHour242(d, p2) {
  return pad2(d.getUTCHours(), p2, 2);
}
function formatUTCHour122(d, p2) {
  return pad2(d.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear2(d, p2) {
  return pad2(1 + utcDay_default2.count(utcYear_default2(d), d), p2, 3);
}
function formatUTCMilliseconds2(d, p2) {
  return pad2(d.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds2(d, p2) {
  return formatUTCMilliseconds2(d, p2) + "000";
}
function formatUTCMonthNumber2(d, p2) {
  return pad2(d.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes2(d, p2) {
  return pad2(d.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds2(d, p2) {
  return pad2(d.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday2(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday2(d, p2) {
  return pad2(utcSunday2.count(utcYear_default2(d) - 1, d), p2, 2);
}
function UTCdISO2(d) {
  var day3 = d.getUTCDay();
  return day3 >= 4 || day3 === 0 ? utcThursday2(d) : utcThursday2.ceil(d);
}
function formatUTCWeekNumberISO2(d, p2) {
  d = UTCdISO2(d);
  return pad2(utcThursday2.count(utcYear_default2(d), d) + (utcYear_default2(d).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday2(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday2(d, p2) {
  return pad2(utcMonday2.count(utcYear_default2(d) - 1, d), p2, 2);
}
function formatUTCYear2(d, p2) {
  return pad2(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO2(d, p2) {
  d = UTCdISO2(d);
  return pad2(d.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear2(d, p2) {
  return pad2(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO2(d, p2) {
  var day3 = d.getUTCDay();
  d = day3 >= 4 || day3 === 0 ? utcThursday2(d) : utcThursday2.ceil(d);
  return pad2(d.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone2() {
  return "+0000";
}
function formatLiteralPercent2() {
  return "%";
}
function formatUnixTimestamp2(d) {
  return +d;
}
function formatUnixTimestampSeconds2(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/@nivo/scales/node_modules/d3-time-format/src/defaultLocale.js
var locale3;
var timeFormat2;
var timeParse2;
var utcFormat2;
var utcParse2;
defaultLocale3({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale3(definition) {
  locale3 = formatLocale2(definition);
  timeFormat2 = locale3.format;
  timeParse2 = locale3.parse;
  utcFormat2 = locale3.utcFormat;
  utcParse2 = locale3.utcParse;
  return locale3;
}

// node_modules/@nivo/scales/node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier2 = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative2(date) {
  return date.toISOString();
}
var formatIso2 = Date.prototype.toISOString ? formatIsoNative2 : utcFormat2(isoSpecifier2);

// node_modules/@nivo/scales/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative2(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso2 = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative2 : utcParse2(isoSpecifier2);

// node_modules/@nivo/scales/dist/nivo-scales.es.js
function $() {
  return $ = Object.assign ? Object.assign.bind() : function(n5) {
    for (var t5 = 1; t5 < arguments.length; t5++) {
      var r5 = arguments[t5];
      for (var e7 in r5)
        Object.prototype.hasOwnProperty.call(r5, e7) && (n5[e7] = r5[e7]);
    }
    return n5;
  }, $.apply(this, arguments);
}
var J = [function(n5) {
  return n5.setMilliseconds(0);
}, function(n5) {
  return n5.setSeconds(0);
}, function(n5) {
  return n5.setMinutes(0);
}, function(n5) {
  return n5.setHours(0);
}, function(n5) {
  return n5.setDate(1);
}, function(n5) {
  return n5.setMonth(0);
}];
var K = { millisecond: [], second: J.slice(0, 1), minute: J.slice(0, 2), hour: J.slice(0, 3), day: J.slice(0, 4), month: J.slice(0, 5), year: J.slice(0, 6) };
var L = function(n5) {
  return function(t5) {
    return K[n5].forEach(function(n6) {
      n6(t5);
    }), t5;
  };
};
var Q = function(n5) {
  var t5 = n5.format, r5 = void 0 === t5 ? "native" : t5, e7 = n5.precision, a3 = void 0 === e7 ? "millisecond" : e7, u4 = n5.useUTC, c = void 0 === u4 || u4, s2 = L(a3);
  return function(n6) {
    if (void 0 === n6)
      return n6;
    if ("native" === r5 || n6 instanceof Date)
      return s2(n6);
    var t6 = c ? utcParse2(r5) : timeParse2(r5);
    return s2(t6(n6));
  };
};
var W = function(n5, t5, r5, e7) {
  var a3, i4, o3, c, s2 = n5.min, d = void 0 === s2 ? 0 : s2, f = n5.max, l3 = void 0 === f ? "auto" : f, m2 = n5.stacked, v3 = void 0 !== m2 && m2, y = n5.reverse, p2 = void 0 !== y && y, h = n5.clamp, g3 = void 0 !== h && h, x = n5.nice, k3 = void 0 !== x && x;
  "auto" === d ? a3 = true === v3 ? null != (i4 = t5.minStacked) ? i4 : 0 : t5.min : a3 = d;
  "auto" === l3 ? o3 = true === v3 ? null != (c = t5.maxStacked) ? c : 0 : t5.max : o3 = l3;
  var T3 = linear().rangeRound("x" === e7 ? [0, r5] : [r5, 0]).domain(p2 ? [o3, a3] : [a3, o3]).clamp(g3);
  return true === k3 ? T3.nice() : "number" == typeof k3 && T3.nice(k3), X(T3, v3);
};
var X = function(n5, t5) {
  void 0 === t5 && (t5 = false);
  var r5 = n5;
  return r5.type = "linear", r5.stacked = t5, r5;
};
var Y = function(n5, t5, r5) {
  var e7 = point().range([0, r5]).domain(t5.all);
  return e7.type = "point", e7;
};
var _ = function(n5, t5, r5, e7) {
  var a3 = n5.round, i4 = void 0 === a3 || a3, o3 = band().range("x" === e7 ? [0, r5] : [r5, 0]).domain(t5.all).round(i4);
  return nn(o3);
};
var nn = function(n5) {
  var t5 = n5;
  return t5.type = "band", t5;
};
var tn = function(n5, t5, r5) {
  var e7, a3, i4 = n5.format, o3 = void 0 === i4 ? "native" : i4, u4 = n5.precision, c = void 0 === u4 ? "millisecond" : u4, s2 = n5.min, l3 = void 0 === s2 ? "auto" : s2, m2 = n5.max, v3 = void 0 === m2 ? "auto" : m2, y = n5.useUTC, p2 = void 0 === y || y, h = n5.nice, g3 = void 0 !== h && h, x = Q({ format: o3, precision: c, useUTC: p2 });
  e7 = "auto" === l3 ? x(t5.min) : "native" !== o3 ? x(l3) : l3, a3 = "auto" === v3 ? x(t5.max) : "native" !== o3 ? x(v3) : v3;
  var k3 = p2 ? utcTime() : time();
  k3.range([0, r5]), e7 && a3 && k3.domain([e7, a3]), true === g3 ? k3.nice() : "object" != typeof g3 && "number" != typeof g3 || k3.nice(g3);
  var T3 = k3;
  return T3.type = "time", T3.useUTC = p2, T3;
};
var rn2 = function(n5, t5, r5, e7) {
  var a3, i4 = n5.base, o3 = void 0 === i4 ? 10 : i4, u4 = n5.min, c = void 0 === u4 ? "auto" : u4, s2 = n5.max, d = void 0 === s2 ? "auto" : s2;
  if (t5.all.some(function(n6) {
    return 0 === n6;
  }))
    throw new Error("a log scale domain must not include or cross zero");
  var f, m2, v3 = false;
  if (t5.all.filter(function(n6) {
    return null != n6;
  }).forEach(function(n6) {
    v3 || (void 0 === a3 ? a3 = Math.sign(n6) : Math.sign(n6) !== a3 && (v3 = true));
  }), v3)
    throw new Error("a log scale domain must be strictly-positive or strictly-negative");
  f = "auto" === c ? t5.min : c, m2 = "auto" === d ? t5.max : d;
  var y = log().domain([f, m2]).rangeRound("x" === e7 ? [0, r5] : [r5, 0]).base(o3).nice();
  return y.type = "log", y;
};
var en = function(n5, t5, r5, e7) {
  var a3, i4, o3 = n5.constant, u4 = void 0 === o3 ? 1 : o3, c = n5.min, s2 = void 0 === c ? "auto" : c, d = n5.max, f = void 0 === d ? "auto" : d, l3 = n5.reverse, v3 = void 0 !== l3 && l3;
  a3 = "auto" === s2 ? t5.min : s2, i4 = "auto" === f ? t5.max : f;
  var y = symlog().constant(u4).rangeRound("x" === e7 ? [0, r5] : [r5, 0]).nice();
  true === v3 ? y.domain([i4, a3]) : y.domain([a3, i4]);
  var p2 = y;
  return p2.type = "symlog", p2;
};
var an = function(n5) {
  return "x" === n5 ? "y" : "x";
};
var on = function(n5, t5) {
  return n5 === t5;
};
var un = function(n5, t5) {
  return n5.getTime() === t5.getTime();
};
function cn(n5, t5, r5, e7) {
  switch (n5.type) {
    case "linear":
      return W(n5, t5, r5, e7);
    case "point":
      return Y(n5, t5, r5);
    case "band":
      return _(n5, t5, r5, e7);
    case "time":
      return tn(n5, t5, r5);
    case "log":
      return rn2(n5, t5, r5, e7);
    case "symlog":
      return en(n5, t5, r5, e7);
    default:
      throw new Error("invalid scale spec");
  }
}
var sn = function(n5, t5, r5) {
  var e7;
  if ("stacked" in r5 && r5.stacked) {
    var a3 = n5.data["x" === t5 ? "xStacked" : "yStacked"];
    return null == a3 ? null : r5(a3);
  }
  return null != (e7 = r5(n5.data[t5])) ? e7 : null;
};
var dn = function(n5, t5, r5, e7, a3) {
  var i4 = n5.map(function(n6) {
    return function(n7) {
      return $({}, n7, { data: n7.data.map(function(n8) {
        return { data: $({}, n8) };
      }) });
    }(n6);
  }), o3 = fn(i4, t5, r5);
  "stacked" in t5 && true === t5.stacked && vn2(o3, i4), "stacked" in r5 && true === r5.stacked && yn(o3, i4);
  var u4 = cn(t5, o3.x, e7, "x"), c = cn(r5, o3.y, a3, "y"), s2 = i4.map(function(n6) {
    return $({}, n6, { data: n6.data.map(function(n7) {
      return $({}, n7, { position: { x: sn(n7, "x", u4), y: sn(n7, "y", c) } });
    }) });
  });
  return $({}, o3, { series: s2, xScale: u4, yScale: c });
};
var fn = function(n5, t5, r5) {
  return { x: ln(n5, "x", t5), y: ln(n5, "y", r5) };
};
var ln = function(a3, i4, o3, u4) {
  var c = void 0 === u4 ? {} : u4, s2 = c.getValue, d = void 0 === s2 ? function(n5) {
    return n5.data[i4];
  } : s2, f = c.setValue, l3 = void 0 === f ? function(n5, t5) {
    n5.data[i4] = t5;
  } : f;
  if ("linear" === o3.type)
    a3.forEach(function(n5) {
      n5.data.forEach(function(n6) {
        var t5 = d(n6);
        t5 && l3(n6, parseFloat(String(t5)));
      });
    });
  else if ("time" === o3.type && "native" !== o3.format) {
    var m2 = Q(o3);
    a3.forEach(function(n5) {
      n5.data.forEach(function(n6) {
        var t5 = d(n6);
        t5 && l3(n6, m2(t5));
      });
    });
  }
  var v3 = [];
  switch (a3.forEach(function(n5) {
    n5.data.forEach(function(n6) {
      v3.push(d(n6));
    });
  }), o3.type) {
    case "linear":
      var y = (0, import_sortBy.default)((0, import_uniq.default)(v3).filter(function(n5) {
        return null !== n5;
      }), function(n5) {
        return n5;
      });
      return { all: y, min: Math.min.apply(Math, y), max: Math.max.apply(Math, y) };
    case "time":
      var p2 = (0, import_uniqBy.default)(v3, function(n5) {
        return n5.getTime();
      }).slice(0).sort(function(n5, t5) {
        return t5.getTime() - n5.getTime();
      }).reverse();
      return { all: p2, min: p2[0], max: (0, import_last.default)(p2) };
    default:
      var h = (0, import_uniq.default)(v3);
      return { all: h, min: h[0], max: (0, import_last.default)(h) };
  }
};
var mn = function(n5, t5, r5) {
  var i4 = an(n5), o3 = [];
  t5[i4].all.forEach(function(t6) {
    var u4 = (0, import_isDate.default)(t6) ? un : on, c = [];
    r5.forEach(function(r6) {
      var a3 = r6.data.find(function(n6) {
        return u4(n6.data[i4], t6);
      }), s2 = null, d = null;
      if (void 0 !== a3) {
        if (null !== (s2 = a3.data[n5])) {
          var f = (0, import_last.default)(c);
          void 0 === f ? d = s2 : null !== f && (d = f + s2);
        }
        a3.data["x" === n5 ? "xStacked" : "yStacked"] = d;
      }
      c.push(d), null !== d && o3.push(d);
    });
  }), t5[n5].minStacked = Math.min.apply(Math, o3), t5[n5].maxStacked = Math.max.apply(Math, o3);
};
var vn2 = function(n5, t5) {
  return mn("x", n5, t5);
};
var yn = function(n5, t5) {
  return mn("y", n5, t5);
};
var pn = function(n5) {
  var t5 = n5.bandwidth();
  if (0 === t5)
    return n5;
  var r5 = t5 / 2;
  return n5.round() && (r5 = Math.round(r5)), function(t6) {
    var e7;
    return (null != (e7 = n5(t6)) ? e7 : 0) + r5;
  };
};
var hn = { millisecond: [millisecond_default2, millisecond_default2], second: [second_default2, second_default2], minute: [minute_default2, utcMinute_default2], hour: [hour_default2, utcHour_default2], day: [newInterval2(function(n5) {
  return n5.setHours(0, 0, 0, 0);
}, function(n5, t5) {
  return n5.setDate(n5.getDate() + t5);
}, function(n5, t5) {
  return (t5.getTime() - n5.getTime()) / 864e5;
}, function(n5) {
  return Math.floor(n5.getTime() / 864e5);
}), newInterval2(function(n5) {
  return n5.setUTCHours(0, 0, 0, 0);
}, function(n5, t5) {
  return n5.setUTCDate(n5.getUTCDate() + t5);
}, function(n5, t5) {
  return (t5.getTime() - n5.getTime()) / 864e5;
}, function(n5) {
  return Math.floor(n5.getTime() / 864e5);
})], week: [sunday2, utcSunday2], sunday: [sunday2, utcSunday2], monday: [monday2, utcMonday2], tuesday: [tuesday2, utcTuesday2], wednesday: [wednesday2, utcWednesday2], thursday: [thursday2, utcThursday2], friday: [friday2, utcFriday2], saturday: [saturday2, utcSaturday2], month: [month_default2, utcMonth_default2], year: [year_default2, utcYear_default2] };
var gn2 = Object.keys(hn);
var xn = new RegExp("^every\\s*(\\d+)?\\s*(" + gn2.join("|") + ")s?$", "i");
var kn = function(n5, t5) {
  if (Array.isArray(t5))
    return t5;
  if ("string" == typeof t5 && "useUTC" in n5) {
    var r5 = t5.match(xn);
    if (r5) {
      var e7 = r5[1], a3 = r5[2], i4 = hn[a3][n5.useUTC ? 1 : 0];
      if ("day" === a3) {
        var o3, u4, c = n5.domain(), s2 = c[0], d = c[1], f = new Date(d);
        return f.setDate(f.getDate() + 1), null != (o3 = null == (u4 = i4.every(Number(null != e7 ? e7 : 1))) ? void 0 : u4.range(s2, f)) ? o3 : [];
      }
      if (void 0 === e7)
        return n5.ticks(i4);
      var l3 = i4.every(Number(e7));
      if (l3)
        return n5.ticks(l3);
    }
    throw new Error("Invalid tickValues: " + t5);
  }
  if ("ticks" in n5) {
    if (void 0 === t5)
      return n5.ticks();
    if ("number" == typeof (m2 = t5) && isFinite(m2) && Math.floor(m2) === m2)
      return n5.ticks(t5);
  }
  var m2;
  return n5.domain();
};

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
function p() {
  return p = Object.assign ? Object.assign.bind() : function(t5) {
    for (var e7 = 1; e7 < arguments.length; e7++) {
      var i4 = arguments[e7];
      for (var n5 in i4)
        Object.prototype.hasOwnProperty.call(i4, n5) && (t5[n5] = i4[n5]);
    }
    return t5;
  }, p.apply(this, arguments);
}
var b = function(t5) {
  var e7, i4 = t5.axis, n5 = t5.scale, r5 = t5.ticksPosition, o3 = t5.tickValues, l3 = t5.tickSize, s2 = t5.tickPadding, c = t5.tickRotation, f = t5.truncateTickAt, u4 = t5.engine, d = void 0 === u4 ? "svg" : u4, x = kn(n5, o3), m2 = rn[d], k3 = "bandwidth" in n5 ? pn(n5) : n5, g3 = { lineX: 0, lineY: 0 }, v3 = { textX: 0, textY: 0 }, b3 = "object" == typeof document && "rtl" === document.dir, P4 = m2.align.center, T3 = m2.baseline.center;
  "x" === i4 ? (e7 = function(t6) {
    var e8;
    return { x: null != (e8 = k3(t6)) ? e8 : 0, y: 0 };
  }, g3.lineY = l3 * ("after" === r5 ? 1 : -1), v3.textY = (l3 + s2) * ("after" === r5 ? 1 : -1), T3 = "after" === r5 ? m2.baseline.top : m2.baseline.bottom, 0 === c ? P4 = m2.align.center : "after" === r5 && c < 0 || "before" === r5 && c > 0 ? (P4 = m2.align[b3 ? "left" : "right"], T3 = m2.baseline.center) : ("after" === r5 && c > 0 || "before" === r5 && c < 0) && (P4 = m2.align[b3 ? "right" : "left"], T3 = m2.baseline.center)) : (e7 = function(t6) {
    var e8;
    return { x: 0, y: null != (e8 = k3(t6)) ? e8 : 0 };
  }, g3.lineX = l3 * ("after" === r5 ? 1 : -1), v3.textX = (l3 + s2) * ("after" === r5 ? 1 : -1), P4 = "after" === r5 ? m2.align.left : m2.align.right);
  return { ticks: x.map(function(t6) {
    var i5 = "string" == typeof t6 ? function(t7) {
      var e8 = String(t7).length;
      return f && f > 0 && e8 > f ? "" + String(t7).slice(0, f).concat("...") : "" + t7;
    }(t6) : t6;
    return p({ key: t6 instanceof Date ? "" + t6.valueOf() : "" + t6, value: i5 }, e7(t6), g3, v3);
  }), textAlign: P4, textBaseline: T3 };
};
var P2 = function(t5, e7) {
  if (void 0 === t5 || "function" == typeof t5)
    return t5;
  if ("time" === e7.type) {
    var i4 = timeFormat(t5);
    return function(t6) {
      return i4(t6 instanceof Date ? t6 : new Date(t6));
    };
  }
  return format(t5);
};
var T = function(t5) {
  var e7, i4 = t5.width, n5 = t5.height, r5 = t5.scale, a3 = t5.axis, o3 = t5.values, l3 = (e7 = o3, Array.isArray(e7) ? o3 : void 0) || kn(r5, o3), s2 = "bandwidth" in r5 ? pn(r5) : r5, c = "x" === a3 ? l3.map(function(t6) {
    var e8, i5;
    return { key: t6 instanceof Date ? "" + t6.valueOf() : "" + t6, x1: null != (e8 = s2(t6)) ? e8 : 0, x2: null != (i5 = s2(t6)) ? i5 : 0, y1: 0, y2: n5 };
  }) : l3.map(function(t6) {
    var e8, n6;
    return { key: t6 instanceof Date ? "" + t6.valueOf() : "" + t6, x1: 0, x2: i4, y1: null != (e8 = s2(t6)) ? e8 : 0, y2: null != (n6 = s2(t6)) ? n6 : 0 };
  });
  return c;
};
var A = (0, import_react.memo)(function(t5) {
  var e7, n5 = t5.value, r5 = t5.format, a3 = t5.lineX, s2 = t5.lineY, c = t5.onClick, u4 = t5.textBaseline, d = t5.textAnchor, x = t5.animatedProps, m2 = zt(), y = m2.axis.ticks.line, h = m2.axis.ticks.text, v3 = null != (e7 = null == r5 ? void 0 : r5(n5)) ? e7 : n5, b3 = (0, import_react.useMemo)(function() {
    var t6 = { opacity: x.opacity };
    return c ? { style: p({}, t6, { cursor: "pointer" }), onClick: function(t7) {
      return c(t7, v3);
    } } : { style: t6 };
  }, [x.opacity, c, v3]);
  return (0, import_jsx_runtime.jsxs)(animated.g, p({ transform: x.transform }, b3, { children: [(0, import_jsx_runtime.jsx)("line", { x1: 0, x2: a3, y1: 0, y2: s2, style: y }), h.outlineWidth > 0 && (0, import_jsx_runtime.jsx)(animated.text, { dominantBaseline: u4, textAnchor: d, transform: x.textTransform, style: h, strokeWidth: 2 * h.outlineWidth, stroke: h.outlineColor, strokeLinejoin: "round", children: "" + v3 }), (0, import_jsx_runtime.jsx)(animated.text, { dominantBaseline: u4, textAnchor: d, transform: x.textTransform, style: Mt(h), children: "" + v3 })] }));
});
var S = function(e7) {
  var r5 = e7.axis, a3 = e7.scale, l3 = e7.x, c = void 0 === l3 ? 0 : l3, x = e7.y, m2 = void 0 === x ? 0 : x, y = e7.length, h = e7.ticksPosition, T3 = e7.tickValues, S2 = e7.tickSize, W4 = void 0 === S2 ? 5 : S2, w4 = e7.tickPadding, B3 = void 0 === w4 ? 5 : w4, X4 = e7.tickRotation, Y3 = void 0 === X4 ? 0 : X4, C4 = e7.format, O3 = e7.renderTick, j2 = void 0 === O3 ? A : O3, z4 = e7.truncateTickAt, V = e7.legend, D3 = e7.legendPosition, R = void 0 === D3 ? "end" : D3, E2 = e7.legendOffset, q = void 0 === E2 ? 0 : E2, F = e7.onClick, L3 = e7.ariaHidden, N = zt(), H4 = N.axis.legend.text, I2 = (0, import_react.useMemo)(function() {
    return P2(C4, a3);
  }, [C4, a3]), J2 = b({ axis: r5, scale: a3, ticksPosition: h, tickValues: T3, tickSize: W4, tickPadding: B3, tickRotation: Y3, truncateTickAt: z4 }), G = J2.ticks, K2 = J2.textAlign, M2 = J2.textBaseline, Q3 = null;
  if (void 0 !== V) {
    var U2, Z2 = 0, $3 = 0, _3 = 0;
    "y" === r5 ? (_3 = -90, Z2 = q, "start" === R ? (U2 = "start", $3 = y) : "middle" === R ? (U2 = "middle", $3 = y / 2) : "end" === R && (U2 = "end")) : ($3 = q, "start" === R ? U2 = "start" : "middle" === R ? (U2 = "middle", Z2 = y / 2) : "end" === R && (U2 = "end", Z2 = y)), Q3 = (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [H4.outlineWidth > 0 && (0, import_jsx_runtime.jsx)("text", { transform: "translate(" + Z2 + ", " + $3 + ") rotate(" + _3 + ")", textAnchor: U2, style: p({ dominantBaseline: "central" }, H4), strokeWidth: 2 * H4.outlineWidth, stroke: H4.outlineColor, strokeLinejoin: "round", children: V }), (0, import_jsx_runtime.jsx)("text", { transform: "translate(" + Z2 + ", " + $3 + ") rotate(" + _3 + ")", textAnchor: U2, style: p({ dominantBaseline: "central" }, H4), children: V })] });
  }
  var tt = Ur(), et = tt.animate, it = tt.config, nt = useSpring({ transform: "translate(" + c + "," + m2 + ")", lineX2: "x" === r5 ? y : 0, lineY2: "x" === r5 ? 0 : y, config: it, immediate: !et }), rt = (0, import_react.useCallback)(function(t5) {
    return { opacity: 1, transform: "translate(" + t5.x + "," + t5.y + ")", textTransform: "translate(" + t5.textX + "," + t5.textY + ") rotate(" + Y3 + ")" };
  }, [Y3]), at = (0, import_react.useCallback)(function(t5) {
    return { opacity: 0, transform: "translate(" + t5.x + "," + t5.y + ")", textTransform: "translate(" + t5.textX + "," + t5.textY + ") rotate(" + Y3 + ")" };
  }, [Y3]), ot = useTransition(G, { keys: function(t5) {
    return t5.key;
  }, initial: rt, from: at, enter: rt, update: rt, leave: { opacity: 0 }, config: it, immediate: !et });
  return (0, import_jsx_runtime.jsxs)(animated.g, { transform: nt.transform, "aria-hidden": L3, children: [ot(function(e8, i4, n5, r6) {
    return t2.createElement(j2, p({ tickIndex: r6, format: I2, rotate: Y3, textBaseline: M2, textAnchor: K2, truncateTickAt: z4, animatedProps: e8 }, i4, F ? { onClick: F } : {}));
  }), (0, import_jsx_runtime.jsx)(animated.line, { style: N.axis.domain.line, x1: 0, x2: nt.lineX2, y1: 0, y2: nt.lineY2 }), Q3] });
};
var W2 = (0, import_react.memo)(S);
var w2 = ["top", "right", "bottom", "left"];
var B = (0, import_react.memo)(function(t5) {
  var e7 = t5.xScale, i4 = t5.yScale, n5 = t5.width, r5 = t5.height, a3 = { top: t5.top, right: t5.right, bottom: t5.bottom, left: t5.left };
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: w2.map(function(t6) {
    var o3 = a3[t6];
    if (!o3)
      return null;
    var l3 = "top" === t6 || "bottom" === t6;
    return (0, import_jsx_runtime.jsx)(W2, p({}, o3, { axis: l3 ? "x" : "y", x: "right" === t6 ? n5 : 0, y: "bottom" === t6 ? r5 : 0, scale: l3 ? e7 : i4, length: l3 ? n5 : r5, ticksPosition: "top" === t6 || "left" === t6 ? "before" : "after", truncateTickAt: o3.truncateTickAt }), t6);
  }) });
});
var X2 = (0, import_react.memo)(function(t5) {
  var e7 = t5.animatedProps, i4 = zt();
  return (0, import_jsx_runtime.jsx)(animated.line, p({}, e7, i4.grid.line));
});
var Y2 = (0, import_react.memo)(function(t5) {
  var e7 = t5.lines, i4 = Ur(), n5 = i4.animate, a3 = i4.config, o3 = useTransition(e7, { keys: function(t6) {
    return t6.key;
  }, initial: function(t6) {
    return { opacity: 1, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, from: function(t6) {
    return { opacity: 0, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, enter: function(t6) {
    return { opacity: 1, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, update: function(t6) {
    return { opacity: 1, x1: t6.x1, x2: t6.x2, y1: t6.y1, y2: t6.y2 };
  }, leave: { opacity: 0 }, config: a3, immediate: !n5 });
  return (0, import_jsx_runtime.jsx)("g", { children: o3(function(t6, e8) {
    return (0, import_react.createElement)(X2, p({}, e8, { key: e8.key, animatedProps: t6 }));
  }) });
});
var C2 = (0, import_react.memo)(function(t5) {
  var e7 = t5.width, n5 = t5.height, r5 = t5.xScale, a3 = t5.yScale, o3 = t5.xValues, l3 = t5.yValues, s2 = (0, import_react.useMemo)(function() {
    return !!r5 && T({ width: e7, height: n5, scale: r5, axis: "x", values: o3 });
  }, [r5, o3, e7, n5]), c = (0, import_react.useMemo)(function() {
    return !!a3 && T({ width: e7, height: n5, scale: a3, axis: "y", values: l3 });
  }, [n5, e7, a3, l3]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [s2 && (0, import_jsx_runtime.jsx)(Y2, { lines: s2 }), c && (0, import_jsx_runtime.jsx)(Y2, { lines: c })] });
});
var O2 = function(t5, e7) {
  var i4, n5 = e7.axis, r5 = e7.scale, a3 = e7.x, o3 = void 0 === a3 ? 0 : a3, l3 = e7.y, s2 = void 0 === l3 ? 0 : l3, f = e7.length, u4 = e7.ticksPosition, d = e7.tickValues, x = e7.tickSize, m2 = void 0 === x ? 5 : x, y = e7.tickPadding, h = void 0 === y ? 5 : y, k3 = e7.tickRotation, g3 = void 0 === k3 ? 0 : k3, v3 = e7.format, p2 = e7.legend, P4 = e7.legendPosition, T3 = void 0 === P4 ? "end" : P4, A2 = e7.legendOffset, S2 = void 0 === A2 ? 0 : A2, W4 = e7.theme, w4 = b({ axis: n5, scale: r5, ticksPosition: u4, tickValues: d, tickSize: m2, tickPadding: h, tickRotation: g3, engine: "canvas" }), B3 = w4.ticks, X4 = w4.textAlign, Y3 = w4.textBaseline;
  t5.save(), t5.translate(o3, s2), t5.textAlign = X4, t5.textBaseline = Y3;
  var C4 = W4.axis.ticks.text;
  t5.font = (C4.fontWeight ? C4.fontWeight + " " : "") + C4.fontSize + "px " + C4.fontFamily, (null != (i4 = W4.axis.domain.line.strokeWidth) ? i4 : 0) > 0 && (t5.lineWidth = Number(W4.axis.domain.line.strokeWidth), t5.lineCap = "square", W4.axis.domain.line.stroke && (t5.strokeStyle = W4.axis.domain.line.stroke), t5.beginPath(), t5.moveTo(0, 0), t5.lineTo("x" === n5 ? f : 0, "x" === n5 ? 0 : f), t5.stroke());
  var O3 = "function" == typeof v3 ? v3 : function(t6) {
    return "" + t6;
  };
  if (B3.forEach(function(e8) {
    var i5;
    (null != (i5 = W4.axis.ticks.line.strokeWidth) ? i5 : 0) > 0 && (t5.lineWidth = Number(W4.axis.ticks.line.strokeWidth), t5.lineCap = "square", W4.axis.ticks.line.stroke && (t5.strokeStyle = W4.axis.ticks.line.stroke), t5.beginPath(), t5.moveTo(e8.x, e8.y), t5.lineTo(e8.x + e8.lineX, e8.y + e8.lineY), t5.stroke());
    var n6 = O3(e8.value);
    t5.save(), t5.translate(e8.x + e8.textX, e8.y + e8.textY), t5.rotate(Kt(g3)), C4.outlineWidth > 0 && (t5.strokeStyle = C4.outlineColor, t5.lineWidth = 2 * C4.outlineWidth, t5.lineJoin = "round", t5.strokeText("" + n6, 0, 0)), W4.axis.ticks.text.fill && (t5.fillStyle = C4.fill), t5.fillText("" + n6, 0, 0), t5.restore();
  }), void 0 !== p2) {
    var j2 = 0, z4 = 0, V = 0, D3 = "center";
    "y" === n5 ? (V = -90, j2 = S2, "start" === T3 ? (D3 = "start", z4 = f) : "middle" === T3 ? (D3 = "center", z4 = f / 2) : "end" === T3 && (D3 = "end")) : (z4 = S2, "start" === T3 ? D3 = "start" : "middle" === T3 ? (D3 = "center", j2 = f / 2) : "end" === T3 && (D3 = "end", j2 = f)), t5.translate(j2, z4), t5.rotate(Kt(V)), t5.font = (W4.axis.legend.text.fontWeight ? W4.axis.legend.text.fontWeight + " " : "") + W4.axis.legend.text.fontSize + "px " + W4.axis.legend.text.fontFamily, W4.axis.legend.text.fill && (t5.fillStyle = W4.axis.legend.text.fill), t5.textAlign = D3, t5.textBaseline = "middle", t5.fillText(p2, 0, 0);
  }
  t5.restore();
};
var j = function(t5, e7) {
  var i4 = e7.xScale, n5 = e7.yScale, r5 = e7.width, a3 = e7.height, o3 = e7.top, l3 = e7.right, s2 = e7.bottom, c = e7.left, f = e7.theme, u4 = { top: o3, right: l3, bottom: s2, left: c };
  w2.forEach(function(e8) {
    var o4 = u4[e8];
    if (!o4)
      return null;
    var l4 = "top" === e8 || "bottom" === e8, s3 = "top" === e8 || "left" === e8 ? "before" : "after", c2 = l4 ? i4 : n5, d = P2(o4.format, c2);
    O2(t5, p({}, o4, { axis: l4 ? "x" : "y", x: "right" === e8 ? r5 : 0, y: "bottom" === e8 ? a3 : 0, scale: c2, format: d, length: l4 ? r5 : a3, ticksPosition: s3, theme: f }));
  });
};
var z = function(t5, e7) {
  var i4 = e7.width, n5 = e7.height, r5 = e7.scale, a3 = e7.axis, o3 = e7.values;
  T({ width: i4, height: n5, scale: r5, axis: a3, values: o3 }).forEach(function(e8) {
    t5.beginPath(), t5.moveTo(e8.x1, e8.y1), t5.lineTo(e8.x2, e8.y2), t5.stroke();
  });
};

// node_modules/@nivo/line/dist/nivo-line.es.js
var import_uniqueId = __toESM(require_uniqueId());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());

// node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_react2 = __toESM(require_react());

// node_modules/robust-predicates/esm/util.js
var epsilon = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon) * epsilon;
function sum2(elen, e7, flen, f, h) {
  let Q3, Qnew, hh, bvirt;
  let enow = e7[0];
  let fnow = f[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q3 = enow;
    enow = e7[++eindex];
  } else {
    Q3 = fnow;
    fnow = f[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q3;
      hh = Q3 - (Qnew - enow);
      enow = e7[++eindex];
    } else {
      Qnew = fnow + Q3;
      hh = Q3 - (Qnew - fnow);
      fnow = f[++findex];
    }
    Q3 = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q3 + enow;
        bvirt = Qnew - Q3;
        hh = Q3 - (Qnew - bvirt) + (enow - bvirt);
        enow = e7[++eindex];
      } else {
        Qnew = Q3 + fnow;
        bvirt = Qnew - Q3;
        hh = Q3 - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
      }
      Q3 = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q3 + enow;
    bvirt = Qnew - Q3;
    hh = Q3 - (Qnew - bvirt) + (enow - bvirt);
    enow = e7[++eindex];
    Q3 = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q3 + fnow;
    bvirt = Qnew - Q3;
    hh = Q3 - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f[++findex];
    Q3 = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  if (Q3 !== 0 || hindex === 0) {
    h[hindex++] = Q3;
  }
  return hindex;
}
function estimate(elen, e7) {
  let Q3 = e7[0];
  for (let i4 = 1; i4 < elen; i4++)
    Q3 += e7[i4];
  return Q3;
}
function vec(n5) {
  return new Float64Array(n5);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon) * epsilon;
var ccwerrboundB = (2 + 12 * epsilon) * epsilon;
var ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;
var B2 = vec(4);
var C1 = vec(8);
var C22 = vec(12);
var D = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t13, t03, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c = splitter * acx;
  ahi = c - (c - acx);
  alo = acx - ahi;
  c = splitter * bcy;
  bhi = c - (c - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcx;
  c = splitter * acy;
  ahi = c - (c - acy);
  alo = acy - ahi;
  c = splitter * bcx;
  bhi = c - (c - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  B2[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  B2[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B2[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B2[3] = u32;
  let det = estimate(4, B2);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound)
    return det;
  s1 = acxtail * bcy;
  c = splitter * acxtail;
  ahi = c - (c - acxtail);
  alo = acxtail - ahi;
  c = splitter * bcy;
  bhi = c - (c - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcx;
  c = splitter * acytail;
  ahi = c - (c - acytail);
  alo = acytail - ahi;
  c = splitter * bcx;
  bhi = c - (c - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C1len = sum2(4, B2, 4, u, C1);
  s1 = acx * bcytail;
  c = splitter * acx;
  ahi = c - (c - acx);
  alo = acx - ahi;
  c = splitter * bcytail;
  bhi = c - (c - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcxtail;
  c = splitter * acy;
  ahi = c - (c - acy);
  alo = acy - ahi;
  c = splitter * bcxtail;
  bhi = c - (c - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C2len = sum2(C1len, C1, 4, u, C22);
  s1 = acxtail * bcytail;
  c = splitter * acxtail;
  ahi = c - (c - acxtail);
  alo = acxtail - ahi;
  c = splitter * bcytail;
  bhi = c - (c - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcxtail;
  c = splitter * acytail;
  ahi = c - (c - acytail);
  alo = acytail - ahi;
  c = splitter * bcxtail;
  bhi = c - (c - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const Dlen = sum2(C2len, C22, 4, u, D);
  return D[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum)
    return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon) * epsilon;
var o3derrboundB = (3 + 28 * epsilon) * epsilon;
var o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon) * epsilon;
var iccerrboundB = (4 + 48 * epsilon) * epsilon;
var iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v2 = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon) * epsilon;
var isperrboundB = (5 + 72 * epsilon) * epsilon;
var isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n5 = points.length;
    const coords = new Float64Array(n5 * 2);
    for (let i4 = 0; i4 < n5; i4++) {
      const p2 = points[i4];
      coords[2 * i4] = getX(p2);
      coords[2 * i4 + 1] = getY(p2);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n5 = coords.length >> 1;
    if (n5 > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n5 - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n5));
    this._hullPrev = new Uint32Array(n5);
    this._hullNext = new Uint32Array(n5);
    this._hullTri = new Uint32Array(n5);
    this._hullHash = new Int32Array(this._hashSize);
    this._ids = new Uint32Array(n5);
    this._dists = new Float64Array(n5);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n5 = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i4 = 0; i4 < n5; i4++) {
      const x = coords[2 * i4];
      const y = coords[2 * i4 + 1];
      if (x < minX)
        minX = x;
      if (y < minY)
        minY = y;
      if (x > maxX)
        maxX = x;
      if (y > maxY)
        maxY = y;
      this._ids[i4] = i4;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let i0, i1, i22;
    for (let i4 = 0, minDist = Infinity; i4 < n5; i4++) {
      const d = dist(cx, cy, coords[2 * i4], coords[2 * i4 + 1]);
      if (d < minDist) {
        i0 = i4;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    for (let i4 = 0, minDist = Infinity; i4 < n5; i4++) {
      if (i4 === i0)
        continue;
      const d = dist(i0x, i0y, coords[2 * i4], coords[2 * i4 + 1]);
      if (d < minDist && d > 0) {
        i1 = i4;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i4 = 0; i4 < n5; i4++) {
      if (i4 === i0 || i4 === i1)
        continue;
      const r5 = circumradius(i0x, i0y, i1x, i1y, coords[2 * i4], coords[2 * i4 + 1]);
      if (r5 < minRadius) {
        i22 = i4;
        minRadius = r5;
      }
    }
    let i2x = coords[2 * i22];
    let i2y = coords[2 * i22 + 1];
    if (minRadius === Infinity) {
      for (let i4 = 0; i4 < n5; i4++) {
        this._dists[i4] = coords[2 * i4] - coords[0] || coords[2 * i4 + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n5 - 1);
      const hull = new Uint32Array(n5);
      let j2 = 0;
      for (let i4 = 0, d0 = -Infinity; i4 < n5; i4++) {
        const id = this._ids[i4];
        const d = this._dists[id];
        if (d > d0) {
          hull[j2++] = id;
          d0 = d;
        }
      }
      this.hull = hull.subarray(0, j2);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i4 = i1;
      const x = i1x;
      const y = i1y;
      i1 = i22;
      i1x = i2x;
      i1y = i2y;
      i22 = i4;
      i2x = x;
      i2y = y;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i4 = 0; i4 < n5; i4++) {
      this._dists[i4] = dist(coords[2 * i4], coords[2 * i4 + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n5 - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i22] = i1;
    hullNext[i1] = hullPrev[i0] = i22;
    hullNext[i22] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i22] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i22;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i22, -1, -1, -1);
    for (let k3 = 0, xp, yp; k3 < this._ids.length; k3++) {
      const i4 = this._ids[k3];
      const x = coords[2 * i4];
      const y = coords[2 * i4 + 1];
      if (k3 > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON)
        continue;
      xp = x;
      yp = y;
      if (i4 === i0 || i4 === i1 || i4 === i22)
        continue;
      let start = 0;
      for (let j2 = 0, key = this._hashKey(x, y); j2 < this._hashSize; j2++) {
        start = hullHash[(key + j2) % this._hashSize];
        if (start !== -1 && start !== hullNext[start])
          break;
      }
      start = hullPrev[start];
      let e7 = start, q;
      while (q = hullNext[e7], orient2d(x, y, coords[2 * e7], coords[2 * e7 + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
        e7 = q;
        if (e7 === start) {
          e7 = -1;
          break;
        }
      }
      if (e7 === -1)
        continue;
      let t5 = this._addTriangle(e7, i4, hullNext[e7], -1, -1, hullTri[e7]);
      hullTri[i4] = this._legalize(t5 + 2);
      hullTri[e7] = t5;
      hullSize++;
      let n6 = hullNext[e7];
      while (q = hullNext[n6], orient2d(x, y, coords[2 * n6], coords[2 * n6 + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
        t5 = this._addTriangle(n6, i4, q, hullTri[i4], -1, hullTri[n6]);
        hullTri[i4] = this._legalize(t5 + 2);
        hullNext[n6] = n6;
        hullSize--;
        n6 = q;
      }
      if (e7 === start) {
        while (q = hullPrev[e7], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e7], coords[2 * e7 + 1]) < 0) {
          t5 = this._addTriangle(q, i4, e7, -1, hullTri[e7], hullTri[q]);
          this._legalize(t5 + 2);
          hullTri[q] = t5;
          hullNext[e7] = e7;
          hullSize--;
          e7 = q;
        }
      }
      this._hullStart = hullPrev[i4] = e7;
      hullNext[e7] = hullPrev[n6] = i4;
      hullNext[i4] = n6;
      hullHash[this._hashKey(x, y)] = i4;
      hullHash[this._hashKey(coords[2 * e7], coords[2 * e7 + 1])] = e7;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i4 = 0, e7 = this._hullStart; i4 < hullSize; i4++) {
      this.hull[i4] = e7;
      e7 = hullNext[e7];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x, y) {
    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a3) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i4 = 0;
    let ar = 0;
    while (true) {
      const b3 = halfedges[a3];
      const a0 = a3 - a3 % 3;
      ar = a0 + (a3 + 2) % 3;
      if (b3 === -1) {
        if (i4 === 0)
          break;
        a3 = EDGE_STACK[--i4];
        continue;
      }
      const b0 = b3 - b3 % 3;
      const al = a0 + (a3 + 1) % 3;
      const bl = b0 + (b3 + 2) % 3;
      const p0 = triangles[ar];
      const pr2 = triangles[a3];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p0],
        coords[2 * p0 + 1],
        coords[2 * pr2],
        coords[2 * pr2 + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a3] = p1;
        triangles[b3] = p0;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e7 = this._hullStart;
          do {
            if (this._hullTri[e7] === bl) {
              this._hullTri[e7] = a3;
              break;
            }
            e7 = this._hullPrev[e7];
          } while (e7 !== this._hullStart);
        }
        this._link(a3, hbl);
        this._link(b3, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b3 + 1) % 3;
        if (i4 < EDGE_STACK.length) {
          EDGE_STACK[i4++] = br;
        }
      } else {
        if (i4 === 0)
          break;
        a3 = EDGE_STACK[--i4];
      }
    }
    return ar;
  }
  _link(a3, b3) {
    this._halfedges[a3] = b3;
    if (b3 !== -1)
      this._halfedges[b3] = a3;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i22, a3, b3, c) {
    const t5 = this.trianglesLen;
    this._triangles[t5] = i0;
    this._triangles[t5 + 1] = i1;
    this._triangles[t5 + 2] = i22;
    this._link(t5, a3);
    this._link(t5 + 1, b3);
    this._link(t5 + 2, c);
    this.trianglesLen += 3;
    return t5;
  }
};
function pseudoAngle(dx, dy) {
  const p2 = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p2 : 1 + p2) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = (ey * bl - dy * cl) * d;
  const y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = ax + (ey * bl - dy * cl) * d;
  const y = ay + (dx * cl - ex * bl) * d;
  return { x, y };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i4 = left + 1; i4 <= right; i4++) {
      const temp = ids[i4];
      const tempDist = dists[temp];
      let j2 = i4 - 1;
      while (j2 >= left && dists[ids[j2]] > tempDist)
        ids[j2 + 1] = ids[j2--];
      ids[j2 + 1] = temp;
    }
  } else {
    const median = left + right >> 1;
    let i4 = left + 1;
    let j2 = right;
    swap(ids, median, i4);
    if (dists[ids[left]] > dists[ids[right]])
      swap(ids, left, right);
    if (dists[ids[i4]] > dists[ids[right]])
      swap(ids, i4, right);
    if (dists[ids[left]] > dists[ids[i4]])
      swap(ids, left, i4);
    const temp = ids[i4];
    const tempDist = dists[temp];
    while (true) {
      do
        i4++;
      while (dists[ids[i4]] < tempDist);
      do
        j2--;
      while (dists[ids[j2]] > tempDist);
      if (j2 < i4)
        break;
      swap(ids, i4, j2);
    }
    ids[left + 1] = ids[j2];
    ids[j2] = temp;
    if (right - i4 + 1 >= j2 - left) {
      quicksort(ids, dists, i4, right);
      quicksort(ids, dists, left, j2 - 1);
    } else {
      quicksort(ids, dists, left, j2 - 1);
      quicksort(ids, dists, i4, right);
    }
  }
}
function swap(arr, i4, j2) {
  const tmp = arr[i4];
  arr[i4] = arr[j2];
  arr[j2] = tmp;
}
function defaultGetX(p2) {
  return p2[0];
}
function defaultGetY(p2) {
  return p2[1];
}

// node_modules/d3-delaunay/src/path.js
var epsilon2 = 1e-6;
var Path = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x, y) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x, y) {
    this._ += `L${this._x1 = +x},${this._y1 = +y}`;
  }
  arc(x, y, r5) {
    x = +x, y = +y, r5 = +r5;
    const x0 = x + r5;
    const y0 = y;
    if (r5 < 0)
      throw new Error("negative radius");
    if (this._x1 === null)
      this._ += `M${x0},${y0}`;
    else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2)
      this._ += "L" + x0 + "," + y0;
    if (!r5)
      return;
    this._ += `A${r5},${r5},0,1,1,${x - r5},${y}A${r5},${r5},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  }
  rect(x, y, w4, h) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w4}v${+h}h${-w4}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x, y) {
    this._.push([x, y]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x, y) {
    this._.push([x, y]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
      throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    let bx, by;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i4 = 0, j2 = 0, n5 = triangles.length, x, y; i4 < n5; i4 += 3, j2 += 2) {
      const t13 = triangles[i4] * 2;
      const t22 = triangles[i4 + 1] * 2;
      const t32 = triangles[i4 + 2] * 2;
      const x12 = points[t13];
      const y12 = points[t13 + 1];
      const x2 = points[t22];
      const y2 = points[t22 + 1];
      const x3 = points[t32];
      const y3 = points[t32 + 1];
      const dx = x2 - x12;
      const dy = y2 - y12;
      const ex = x3 - x12;
      const ey = y3 - y12;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        if (bx === void 0) {
          bx = by = 0;
          for (const i5 of hull)
            bx += points[i5 * 2], by += points[i5 * 2 + 1];
          bx /= hull.length, by /= hull.length;
        }
        const a3 = 1e9 * Math.sign((bx - x12) * ey - (by - y12) * ex);
        x = (x12 + x3) / 2 - a3 * ey;
        y = (y12 + y3) / 2 + a3 * ex;
      } else {
        const d = 1 / ab4;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x = x12 + (ey * bl - dy * cl) * d;
        y = y12 + (dx * cl - ex * bl) * d;
      }
      circumcenters[j2] = x;
      circumcenters[j2 + 1] = y;
    }
    let h = hull[hull.length - 1];
    let p0, p1 = h * 4;
    let x0, x1 = points[2 * h];
    let y0, y1 = points[2 * h + 1];
    vectors.fill(0);
    for (let i4 = 0; i4 < hull.length; ++i4) {
      h = hull[i4];
      p0 = p1, x0 = x1, y0 = y1;
      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
      vectors[p0 + 2] = vectors[p1] = y0 - y1;
      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1)
      return null;
    for (let i4 = 0, n5 = halfedges.length; i4 < n5; ++i4) {
      const j2 = halfedges[i4];
      if (j2 < i4)
        continue;
      const ti = Math.floor(i4 / 3) * 2;
      const tj = Math.floor(j2 / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i4 = 0; i4 < hull.length; ++i4) {
      h0 = h1, h1 = hull[i4];
      const t5 = Math.floor(inedges[h1] / 3) * 2;
      const x = circumcenters[t5];
      const y = circumcenters[t5 + 1];
      const v3 = h0 * 4;
      const p2 = this._project(x, y, vectors[v3 + 2], vectors[v3 + 3]);
      if (p2)
        this._renderSegment(x, y, p2[0], p2[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i4, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const points = this._clip(i4);
    if (points === null || !points.length)
      return;
    context.moveTo(points[0], points[1]);
    let n5 = points.length;
    while (points[0] === points[n5 - 2] && points[1] === points[n5 - 1] && n5 > 1)
      n5 -= 2;
    for (let i5 = 2; i5 < n5; i5 += 2) {
      if (points[i5] !== points[i5 - 2] || points[i5 + 1] !== points[i5 - 1])
        context.lineTo(points[i5], points[i5 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i4 = 0, n5 = points.length / 2; i4 < n5; ++i4) {
      const cell = this.cellPolygon(i4);
      if (cell)
        cell.index = i4, yield cell;
    }
  }
  cellPolygon(i4) {
    const polygon = new Polygon();
    this.renderCell(i4, polygon);
    return polygon.value();
  }
  _renderSegment(x0, y0, x1, y1, context) {
    let S2;
    const c0 = this._regioncode(x0, y0);
    const c1 = this._regioncode(x1, y1);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
    } else if (S2 = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
      context.moveTo(S2[0], S2[1]);
      context.lineTo(S2[2], S2[3]);
    }
  }
  contains(i4, x, y) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return false;
    return this.delaunay._step(i4, x, y) === i4;
  }
  *neighbors(i4) {
    const ci = this._clip(i4);
    if (ci)
      for (const j2 of this.delaunay.neighbors(i4)) {
        const cj = this._clip(j2);
        if (cj)
          loop:
            for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
                  yield j2;
                  break loop;
                }
              }
            }
      }
  }
  _cell(i4) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i4];
    if (e0 === -1)
      return null;
    const points = [];
    let e7 = e0;
    do {
      const t5 = Math.floor(e7 / 3);
      points.push(circumcenters[t5 * 2], circumcenters[t5 * 2 + 1]);
      e7 = e7 % 3 === 2 ? e7 - 2 : e7 + 1;
      if (triangles[e7] !== i4)
        break;
      e7 = halfedges[e7];
    } while (e7 !== e0 && e7 !== -1);
    return points;
  }
  _clip(i4) {
    if (i4 === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i4);
    if (points === null)
      return null;
    const { vectors: V } = this;
    const v3 = i4 * 4;
    return this._simplify(V[v3] || V[v3 + 1] ? this._clipInfinite(i4, points, V[v3], V[v3 + 1], V[v3 + 2], V[v3 + 3]) : this._clipFinite(i4, points));
  }
  _clipFinite(i4, points) {
    const n5 = points.length;
    let P4 = null;
    let x0, y0, x1 = points[n5 - 2], y1 = points[n5 - 1];
    let c0, c1 = this._regioncode(x1, y1);
    let e0, e1 = 0;
    for (let j2 = 0; j2 < n5; j2 += 2) {
      x0 = x1, y0 = y1, x1 = points[j2], y1 = points[j2 + 1];
      c0 = c1, c1 = this._regioncode(x1, y1);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P4)
          P4.push(x1, y1);
        else
          P4 = [x1, y1];
      } else {
        let S2, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S2 = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null)
            continue;
          [sx0, sy0, sx1, sy1] = S2;
        } else {
          if ((S2 = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null)
            continue;
          [sx1, sy1, sx0, sy0] = S2;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1)
            this._edge(i4, e0, e1, P4, P4.length);
          if (P4)
            P4.push(sx0, sy0);
          else
            P4 = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1)
          this._edge(i4, e0, e1, P4, P4.length);
        if (P4)
          P4.push(sx1, sy1);
        else
          P4 = [sx1, sy1];
      }
    }
    if (P4) {
      e0 = e1, e1 = this._edgecode(P4[0], P4[1]);
      if (e0 && e1)
        this._edge(i4, e0, e1, P4, P4.length);
    } else if (this.contains(i4, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P4;
  }
  _clipSegment(x0, y0, x1, y1, c0, c1) {
    const flip = c0 < c1;
    if (flip)
      [x0, y0, x1, y1, c0, c1] = [x1, y1, x0, y0, c1, c0];
    while (true) {
      if (c0 === 0 && c1 === 0)
        return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];
      if (c0 & c1)
        return null;
      let x, y, c = c0 || c1;
      if (c & 8)
        x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
      else if (c & 4)
        x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
      else if (c & 2)
        y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
      else
        y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
      if (c0)
        x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
      else
        x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
    }
  }
  _clipInfinite(i4, points, vx0, vy0, vxn, vyn) {
    let P4 = Array.from(points), p2;
    if (p2 = this._project(P4[0], P4[1], vx0, vy0))
      P4.unshift(p2[0], p2[1]);
    if (p2 = this._project(P4[P4.length - 2], P4[P4.length - 1], vxn, vyn))
      P4.push(p2[0], p2[1]);
    if (P4 = this._clipFinite(i4, P4)) {
      for (let j2 = 0, n5 = P4.length, c0, c1 = this._edgecode(P4[n5 - 2], P4[n5 - 1]); j2 < n5; j2 += 2) {
        c0 = c1, c1 = this._edgecode(P4[j2], P4[j2 + 1]);
        if (c0 && c1)
          j2 = this._edge(i4, c0, c1, P4, j2), n5 = P4.length;
      }
    } else if (this.contains(i4, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P4 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P4;
  }
  _edge(i4, e0, e1, P4, j2) {
    while (e0 !== e1) {
      let x, y;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x = this.xmax, y = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x = this.xmax, y = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x = this.xmin, y = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x = this.xmin, y = this.ymin;
          break;
      }
      if ((P4[j2] !== x || P4[j2 + 1] !== y) && this.contains(i4, x, y)) {
        P4.splice(j2, 0, x, y), j2 += 2;
      }
    }
    return j2;
  }
  _project(x0, y0, vx, vy) {
    let t5 = Infinity, c, x, y;
    if (vy < 0) {
      if (y0 <= this.ymin)
        return null;
      if ((c = (this.ymin - y0) / vy) < t5)
        y = this.ymin, x = x0 + (t5 = c) * vx;
    } else if (vy > 0) {
      if (y0 >= this.ymax)
        return null;
      if ((c = (this.ymax - y0) / vy) < t5)
        y = this.ymax, x = x0 + (t5 = c) * vx;
    }
    if (vx > 0) {
      if (x0 >= this.xmax)
        return null;
      if ((c = (this.xmax - x0) / vx) < t5)
        x = this.xmax, y = y0 + (t5 = c) * vy;
    } else if (vx < 0) {
      if (x0 <= this.xmin)
        return null;
      if ((c = (this.xmin - x0) / vx) < t5)
        x = this.xmin, y = y0 + (t5 = c) * vy;
    }
    return [x, y];
  }
  _edgecode(x, y) {
    return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
  }
  _regioncode(x, y) {
    return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
  }
  _simplify(P4) {
    if (P4 && P4.length > 4) {
      for (let i4 = 0; i4 < P4.length; i4 += 2) {
        const j2 = (i4 + 2) % P4.length, k3 = (i4 + 4) % P4.length;
        if (P4[i4] === P4[j2] && P4[j2] === P4[k3] || P4[i4 + 1] === P4[j2 + 1] && P4[j2 + 1] === P4[k3 + 1]) {
          P4.splice(j2, 2), i4 -= 2;
        }
      }
      if (!P4.length)
        P4 = null;
    }
    return P4;
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau = 2 * Math.PI;
var pow = Math.pow;
function pointX(p2) {
  return p2[0];
}
function pointY(p2) {
  return p2[1];
}
function collinear(d) {
  const { triangles, coords } = d;
  for (let i4 = 0; i4 < triangles.length; i4 += 3) {
    const a3 = 2 * triangles[i4], b3 = 2 * triangles[i4 + 1], c = 2 * triangles[i4 + 2], cross2 = (coords[c] - coords[a3]) * (coords[b3 + 1] - coords[a3 + 1]) - (coords[b3] - coords[a3]) * (coords[c + 1] - coords[a3 + 1]);
    if (cross2 > 1e-10)
      return false;
  }
  return true;
}
function jitter(x, y, r5) {
  return [x + Math.sin(x + y) * r5, y + Math.cos(x - y) * r5];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points = this.points;
    if (d.hull && d.hull.length > 2 && collinear(d)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_3, i4) => i4).sort((i4, j2) => points[2 * i4] - points[2 * j2] || points[2 * i4 + 1] - points[2 * j2 + 1]);
      const e7 = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [points[2 * e7], points[2 * e7 + 1], points[2 * f], points[2 * f + 1]], r5 = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i4 = 0, n5 = points.length / 2; i4 < n5; ++i4) {
        const p2 = jitter(points[2 * i4], points[2 * i4 + 1], r5);
        points[2 * i4] = p2[0];
        points[2 * i4 + 1] = p2[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e7 = 0, n5 = halfedges.length; e7 < n5; ++e7) {
      const p2 = triangles[e7 % 3 === 2 ? e7 - 2 : e7 + 1];
      if (halfedges[e7] === -1 || inedges[p2] === -1)
        inedges[p2] = e7;
    }
    for (let i4 = 0, n5 = hull.length; i4 < n5; ++i4) {
      hullIndex[hull[i4]] = i4;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      inedges[hull[0]] = 1;
      if (hull.length === 2) {
        inedges[hull[1]] = 0;
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
      }
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i4) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l3 = collinear2.indexOf(i4);
      if (l3 > 0)
        yield collinear2[l3 - 1];
      if (l3 < collinear2.length - 1)
        yield collinear2[l3 + 1];
      return;
    }
    const e0 = inedges[i4];
    if (e0 === -1)
      return;
    let e7 = e0, p0 = -1;
    do {
      yield p0 = triangles[e7];
      e7 = e7 % 3 === 2 ? e7 - 2 : e7 + 1;
      if (triangles[e7] !== i4)
        return;
      e7 = halfedges[e7];
      if (e7 === -1) {
        const p2 = hull[(_hullIndex[i4] + 1) % hull.length];
        if (p2 !== p0)
          yield p2;
        return;
      }
    } while (e7 !== e0);
  }
  find(x, y, i4 = 0) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return -1;
    const i0 = i4;
    let c;
    while ((c = this._step(i4, x, y)) >= 0 && c !== i4 && c !== i0)
      i4 = c;
    return c;
  }
  _step(i4, x, y) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i4] === -1 || !points.length)
      return (i4 + 1) % (points.length >> 1);
    let c = i4;
    let dc = pow(x - points[i4 * 2], 2) + pow(y - points[i4 * 2 + 1], 2);
    const e0 = inedges[i4];
    let e7 = e0;
    do {
      let t5 = triangles[e7];
      const dt = pow(x - points[t5 * 2], 2) + pow(y - points[t5 * 2 + 1], 2);
      if (dt < dc)
        dc = dt, c = t5;
      e7 = e7 % 3 === 2 ? e7 - 2 : e7 + 1;
      if (triangles[e7] !== i4)
        break;
      e7 = halfedges[e7];
      if (e7 === -1) {
        e7 = hull[(_hullIndex[i4] + 1) % hull.length];
        if (e7 !== t5) {
          if (pow(x - points[e7 * 2], 2) + pow(y - points[e7 * 2 + 1], 2) < dc)
            return e7;
        }
        break;
      }
    } while (e7 !== e0);
    return c;
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i4 = 0, n5 = halfedges.length; i4 < n5; ++i4) {
      const j2 = halfedges[i4];
      if (j2 < i4)
        continue;
      const ti = triangles[i4] * 2;
      const tj = triangles[j2] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r5) {
    if (r5 === void 0 && (!context || typeof context.moveTo !== "function"))
      r5 = context, context = null;
    r5 = r5 == void 0 ? 2 : +r5;
    const buffer = context == null ? context = new Path() : void 0;
    const { points } = this;
    for (let i4 = 0, n5 = points.length; i4 < n5; i4 += 2) {
      const x = points[i4], y = points[i4 + 1];
      context.moveTo(x + r5, y);
      context.arc(x, y, r5, 0, tau);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { hull, points } = this;
    const h = hull[0] * 2, n5 = hull.length;
    context.moveTo(points[h], points[h + 1]);
    for (let i4 = 1; i4 < n5; ++i4) {
      const h2 = 2 * hull[i4];
      context.lineTo(points[h2], points[h2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i4, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, triangles } = this;
    const t03 = triangles[i4 *= 3] * 2;
    const t13 = triangles[i4 + 1] * 2;
    const t22 = triangles[i4 + 2] * 2;
    context.moveTo(points[t03], points[t03 + 1]);
    context.lineTo(points[t13], points[t13 + 1]);
    context.lineTo(points[t22], points[t22 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i4 = 0, n5 = triangles.length / 3; i4 < n5; ++i4) {
      yield this.trianglePolygon(i4);
    }
  }
  trianglePolygon(i4) {
    const polygon = new Polygon();
    this.renderTriangle(i4, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n5 = points.length;
  const array2 = new Float64Array(n5 * 2);
  for (let i4 = 0; i4 < n5; ++i4) {
    const p2 = points[i4];
    array2[i4 * 2] = fx.call(that, p2, i4, points);
    array2[i4 * 2 + 1] = fy.call(that, p2, i4, points);
  }
  return array2;
}
function* flatIterable(points, fx, fy, that) {
  let i4 = 0;
  for (const p2 of points) {
    yield fx.call(that, p2, i4, points);
    yield fy.call(that, p2, i4, points);
    ++i4;
  }
}

// node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var C3 = function(n5) {
  return [n5.x, n5.y];
};
var L2 = _t;
var T2 = "cursor";
var P3 = "top";
var w3 = function(n5) {
  var o3 = n5.points, e7 = n5.getNodePosition, i4 = void 0 === e7 ? C3 : e7, t5 = n5.margin, r5 = void 0 === t5 ? L2 : t5;
  return o3.map(function(n6) {
    var o4 = i4(n6), e8 = o4[0], t6 = o4[1];
    return [e8 + r5.left, t6 + r5.top];
  });
};
var E = function(n5) {
  var o3 = n5.points, e7 = n5.width, i4 = n5.height, t5 = n5.margin, r5 = void 0 === t5 ? L2 : t5, l3 = n5.debug, u4 = Delaunay.from(o3), a3 = l3 ? u4.voronoi([0, 0, r5.left + e7 + r5.right, r5.top + i4 + r5.bottom]) : void 0;
  return { points: o3, delaunay: u4, voronoi: a3 };
};
var W3 = function(o3) {
  var e7 = o3.points, i4 = o3.getNodePosition, t5 = void 0 === i4 ? C3 : i4, r5 = o3.width, l3 = o3.height, u4 = o3.margin, a3 = void 0 === u4 ? L2 : u4, d = o3.debug;
  return (0, import_react2.useMemo)(function() {
    return E({ points: w3({ points: e7, margin: a3, getNodePosition: t5 }), width: r5, height: l3, margin: a3, debug: d });
  }, [e7, r5, l3, a3, d]);
};
var D2 = function(r5) {
  var l3 = r5.elementRef, u4 = r5.nodes, s2 = r5.getNodePosition, c = void 0 === s2 ? C3 : s2, h = r5.delaunay, v3 = r5.setCurrent, f = r5.margin, p2 = void 0 === f ? L2 : f, m2 = r5.detectionRadius, M2 = void 0 === m2 ? 1 / 0 : m2, b3 = r5.isInteractive, k3 = void 0 === b3 || b3, y = r5.onMouseEnter, w4 = r5.onMouseMove, E2 = r5.onMouseLeave, W4 = r5.onClick, x = r5.onTouchStart, S2 = r5.onTouchMove, D3 = r5.onTouchEnd, R = r5.enableTouchCrosshair, A2 = void 0 !== R && R, N = r5.tooltip, O3 = r5.tooltipPosition, j2 = void 0 === O3 ? T2 : O3, I2 = r5.tooltipAnchor, z4 = void 0 === I2 ? P3 : I2, F = (0, import_react2.useState)(null), H4 = F[0], B3 = F[1], q = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(function() {
    q.current = H4;
  }, [q, H4]);
  var G = (0, import_react2.useCallback)(function(n5) {
    if (!l3.current)
      return null;
    var o3 = Sn(l3.current, n5), e7 = o3[0], i4 = o3[1], t5 = h.find(e7, i4), r6 = void 0 !== t5 ? u4[t5] : null;
    if (r6 && M2 !== 1 / 0) {
      var s3 = c(r6), v4 = s3[0], f2 = s3[1];
      Mn(e7, i4, v4 + p2.left, f2 + p2.top) > M2 && (t5 = null, r6 = null);
    }
    return null === t5 || null === r6 ? null : [t5, r6];
  }, [l3, h, u4, c, p2, M2]), J2 = k(), K2 = J2.showTooltipAt, Q3 = J2.showTooltipFromEvent, U2 = J2.hideTooltip, V = (0, import_react2.useMemo)(function() {
    if (N)
      return "cursor" === j2 ? function(n5, o3) {
        Q3(N(n5), o3, z4);
      } : function(n5) {
        var o3 = c(n5), e7 = o3[0], i4 = o3[1];
        K2(N(n5), [e7 + p2.left, i4 + p2.top], z4);
      };
  }, [K2, Q3, N, j2, z4, c, p2]), X4 = (0, import_react2.useCallback)(function(n5) {
    var o3 = G(n5);
    if (B3(o3), null == v3 || v3(o3 ? o3[1] : null), o3) {
      var e7 = o3[1];
      null == V || V(e7, n5), null == y || y(o3[1], n5);
    }
  }, [G, B3, v3, V, y]), Y3 = (0, import_react2.useCallback)(function(n5) {
    var o3 = G(n5);
    if (B3(o3), o3) {
      var e7 = o3[0], i4 = o3[1];
      if (null == v3 || v3(i4), null == V || V(i4, n5), q.current) {
        var t5 = q.current, r6 = t5[0], l4 = t5[1];
        e7 !== r6 ? null == E2 || E2(l4, n5) : null == w4 || w4(i4, n5);
      } else
        null == y || y(i4, n5);
    } else
      null == v3 || v3(null), null == U2 || U2(), q.current && (null == E2 || E2(q.current[1], n5));
  }, [G, B3, q, y, w4, E2, V, U2]), Z2 = (0, import_react2.useCallback)(function(n5) {
    B3(null), null == v3 || v3(null), U2(), E2 && q.current && E2(q.current[1], n5);
  }, [B3, v3, q, U2, E2]), $3 = (0, import_react2.useCallback)(function(n5) {
    var o3 = G(n5);
    B3(o3), o3 && (null == W4 || W4(o3[1], n5));
  }, [G, B3, W4]), _3 = (0, import_react2.useCallback)(function(n5) {
    var o3 = G(n5);
    A2 && (B3(o3), null == v3 || v3(o3 ? o3[1] : null)), o3 && (null == x || x(o3[1], n5));
  }, [G, B3, v3, A2, x]), nn2 = (0, import_react2.useCallback)(function(n5) {
    var o3 = G(n5);
    A2 && (B3(o3), null == v3 || v3(o3 ? o3[1] : null)), o3 && (null == S2 || S2(o3[1], n5));
  }, [G, B3, v3, A2, S2]), on2 = (0, import_react2.useCallback)(function(n5) {
    A2 && (B3(null), null == v3 || v3(null)), D3 && q.current && D3(q.current[1], n5);
  }, [A2, B3, v3, D3, q]);
  return { current: H4, handleMouseEnter: k3 ? X4 : void 0, handleMouseMove: k3 ? Y3 : void 0, handleMouseLeave: k3 ? Z2 : void 0, handleClick: k3 ? $3 : void 0, handleTouchStart: k3 ? _3 : void 0, handleTouchMove: k3 ? nn2 : void 0, handleTouchEnd: k3 ? on2 : void 0 };
};
var I = function(o3) {
  var i4 = o3.nodes, t5 = o3.width, r5 = o3.height, l3 = o3.margin, u4 = void 0 === l3 ? L2 : l3, a3 = o3.getNodePosition, d = o3.setCurrent, s2 = o3.onMouseEnter, c = o3.onMouseMove, h = o3.onMouseLeave, v3 = o3.onClick, f = o3.onTouchStart, p2 = o3.onTouchMove, g3 = o3.onTouchEnd, k3 = o3.enableTouchCrosshair, y = void 0 !== k3 && k3, C4 = o3.detectionRadius, w4 = void 0 === C4 ? 1 / 0 : C4, E2 = o3.tooltip, x = o3.tooltipPosition, S2 = void 0 === x ? T2 : x, R = o3.tooltipAnchor, A2 = void 0 === R ? P3 : R, N = o3.debug, O3 = (0, import_react2.useRef)(null), j2 = W3({ points: i4, getNodePosition: a3, width: t5, height: r5, margin: u4, debug: N }), I2 = j2.delaunay, z4 = j2.voronoi, F = D2({ elementRef: O3, nodes: i4, delaunay: I2, margin: u4, detectionRadius: w4, setCurrent: d, onMouseEnter: s2, onMouseMove: c, onMouseLeave: h, onClick: v3, onTouchStart: f, onTouchMove: p2, onTouchEnd: g3, enableTouchCrosshair: y, tooltip: E2, tooltipPosition: S2, tooltipAnchor: A2 }), H4 = F.current, B3 = F.handleMouseEnter, q = F.handleMouseMove, G = F.handleMouseLeave, J2 = F.handleClick, K2 = F.handleTouchStart, Q3 = F.handleTouchMove, U2 = F.handleTouchEnd, V = (0, import_react2.useMemo)(function() {
    if (N && z4)
      return z4.render();
  }, [N, z4]);
  return (0, import_jsx_runtime2.jsxs)("g", { ref: O3, transform: "translate(" + -u4.left + "," + -u4.top + ")", children: [N && z4 && (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [(0, import_jsx_runtime2.jsx)("path", { d: V, stroke: "red", strokeWidth: 1, opacity: 0.75 }), w4 < 1 / 0 && (0, import_jsx_runtime2.jsx)("path", { stroke: "red", strokeWidth: 0.35, fill: "none", d: I2.renderPoints(void 0, w4) }), H4 && (0, import_jsx_runtime2.jsx)("path", { fill: "pink", opacity: 0.35, d: z4.renderCell(H4[0]) })] }), (0, import_jsx_runtime2.jsx)("rect", { "data-ref": "mesh-interceptor", width: u4.left + t5 + u4.right, height: u4.top + r5 + u4.bottom, fill: "red", opacity: 0, style: { cursor: "auto" }, onMouseEnter: B3, onMouseMove: q, onMouseLeave: G, onTouchStart: K2, onTouchMove: Q3, onTouchEnd: U2, onClick: J2 })] });
};
var z2 = function(n5, o3) {
  n5.save(), n5.globalAlpha = 0.75, n5.beginPath(), o3.render(n5), n5.strokeStyle = "red", n5.lineWidth = 1, n5.stroke(), n5.restore();
};
var H2 = function(n5, o3, e7) {
  n5.save(), n5.globalAlpha = 0.35, n5.beginPath(), o3.renderCell(e7, n5), n5.fillStyle = "pink", n5.fill(), n5.restore();
};

// node_modules/@nivo/line/dist/nivo-line.es.js
function Q2() {
  return Q2 = Object.assign ? Object.assign.bind() : function(e7) {
    for (var o3 = 1; o3 < arguments.length; o3++) {
      var i4 = arguments[o3];
      for (var t5 in i4)
        Object.prototype.hasOwnProperty.call(i4, t5) && (e7[t5] = i4[t5]);
    }
    return e7;
  }, Q2.apply(this, arguments);
}
var U = (0, import_react3.memo)(function(e7) {
  var o3 = e7.point;
  return (0, import_jsx_runtime3.jsx)(w, { id: (0, import_jsx_runtime3.jsxs)("span", { children: ["x: ", (0, import_jsx_runtime3.jsx)("strong", { children: o3.data.xFormatted }), ", y:", " ", (0, import_jsx_runtime3.jsx)("strong", { children: o3.data.yFormatted })] }), enableChip: true, color: o3.serieColor });
});
var Z = (0, import_react3.memo)(function(e7) {
  var o3 = e7.slice, i4 = e7.axis, t5 = zt(), n5 = "x" === i4 ? "y" : "x";
  return (0, import_jsx_runtime3.jsx)(C, { rows: o3.points.map(function(e8) {
    return [(0, import_jsx_runtime3.jsx)(g, { color: e8.serieColor, style: t5.tooltip.chip }, "chip"), e8.serieId, (0, import_jsx_runtime3.jsx)("span", { style: t5.tooltip.tableCellValue, children: e8.data[n5 + "Formatted"] }, "value")];
  }) });
});
var $2 = { curve: "linear", xScale: { type: "point" }, yScale: { type: "linear", min: 0, max: "auto" }, layers: ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"], axisBottom: {}, axisLeft: {}, enableGridX: true, enableGridY: true, enablePoints: true, pointSize: 6, pointColor: { from: "color" }, pointBorderWidth: 0, pointBorderColor: { theme: "background" }, enablePointLabel: false, pointLabel: "yFormatted", colors: { scheme: "nivo" }, enableArea: false, areaBaselineValue: 0, areaOpacity: 0.2, areaBlendMode: "normal", lineWidth: 2, legends: [], isInteractive: true, tooltip: U, enableSlices: false, debugSlices: false, sliceTooltip: Z, debugMesh: false, enableCrosshair: true, crosshairType: "bottom-left" };
var _2 = Q2({}, $2, { enablePointLabel: false, useMesh: false, enableTouchCrosshair: false, animate: true, motionConfig: "gentle", defs: [], fill: [], role: "img" });
var ee = Q2({}, $2, { pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
var oe = function(e7) {
  var i4 = e7.curve;
  return (0, import_react3.useMemo)(function() {
    return line_default().defined(function(e8) {
      return null !== e8.x && null !== e8.y;
    }).x(function(e8) {
      return e8.x;
    }).y(function(e8) {
      return e8.y;
    }).curve(lt(i4));
  }, [i4]);
};
var ie = function(e7) {
  var i4 = e7.curve, t5 = e7.yScale, n5 = e7.areaBaselineValue;
  return (0, import_react3.useMemo)(function() {
    return area_default().defined(function(e8) {
      return null !== e8.x && null !== e8.y;
    }).x(function(e8) {
      return e8.x;
    }).y1(function(e8) {
      return e8.y;
    }).curve(lt(i4)).y0(t5(n5));
  }, [i4, t5, n5]);
};
var te = function(e7) {
  var i4 = e7.componentId, t5 = e7.enableSlices, n5 = e7.points, r5 = e7.width, a3 = e7.height;
  return (0, import_react3.useMemo)(function() {
    if (false === t5)
      return [];
    if ("x" === t5) {
      var e8 = /* @__PURE__ */ new Map();
      return n5.forEach(function(o4) {
        null !== o4.data.x && null !== o4.data.y && (e8.has(o4.x) ? e8.get(o4.x).push(o4) : e8.set(o4.x, [o4]));
      }), Array.from(e8.entries()).sort(function(e9, o4) {
        return e9[0] - o4[0];
      }).map(function(e9, o4, t6) {
        var n6, l3, s2 = e9[0], c = e9[1], u4 = t6[o4 - 1], d = t6[o4 + 1];
        return n6 = u4 ? s2 - (s2 - u4[0]) / 2 : s2, l3 = d ? s2 - n6 + (d[0] - s2) / 2 : r5 - n6, { id: "slice:" + i4 + ":" + s2, x0: n6, x: s2, y0: 0, y: 0, width: l3, height: a3, points: c.reverse() };
      });
    }
    if ("y" === t5) {
      var o3 = /* @__PURE__ */ new Map();
      return n5.forEach(function(e9) {
        null !== e9.data.x && null !== e9.data.y && (o3.has(e9.y) ? o3.get(e9.y).push(e9) : o3.set(e9.y, [e9]));
      }), Array.from(o3.entries()).sort(function(e9, o4) {
        return e9[0] - o4[0];
      }).map(function(e9, o4, i5) {
        var t6, n6, l3 = e9[0], s2 = e9[1], c = i5[o4 - 1], u4 = i5[o4 + 1];
        return t6 = c ? l3 - (l3 - c[0]) / 2 : l3, n6 = u4 ? l3 - t6 + (u4[0] - l3) / 2 : a3 - t6, { id: l3, x0: 0, x: 0, y0: t6, y: l3, width: r5, height: n6, points: s2.reverse() };
      });
    }
  }, [i4, t5, a3, n5, r5]);
};
var ne = "line";
var re2 = function(e7) {
  var n5 = e7.data, r5 = e7.xScale, a3 = void 0 === r5 ? _2.xScale : r5, l3 = e7.xFormat, s2 = e7.yScale, u4 = void 0 === s2 ? _2.yScale : s2, h = e7.yFormat, f = e7.width, v3 = e7.height, p2 = e7.colors, m2 = void 0 === p2 ? _2.colors : p2, g3 = e7.curve, y = void 0 === g3 ? _2.curve : g3, x = e7.areaBaselineValue, b3 = void 0 === x ? _2.areaBaselineValue : x, S2 = e7.pointColor, M2 = void 0 === S2 ? _2.pointColor : S2, C4 = e7.pointBorderColor, k3 = void 0 === C4 ? _2.pointBorderColor : C4, B3 = e7.enableSlices, W4 = void 0 === B3 ? _2.enableSlicesTooltip : B3, E2 = (0, import_react3.useState)((0, import_uniqueId.default)(ne))[0], L3 = Ot(l3), G = Ot(h), P4 = pr(m2, "id"), F = zt(), O3 = Xe(M2, F), V = Xe(k3, F), Y3 = (0, import_react3.useState)([]), R = Y3[0], I2 = Y3[1], X4 = (0, import_react3.useMemo)(function() {
    return dn(n5.filter(function(e8) {
      return -1 === R.indexOf(e8.id);
    }), a3, u4, f, v3);
  }, [n5, R, a3, u4, f, v3]), z4 = X4.xScale, j2 = X4.yScale, D3 = X4.series, q = (0, import_react3.useMemo)(function() {
    var e8 = n5.map(function(e9) {
      return { id: e9.id, label: e9.id, color: P4(e9) };
    }), o3 = e8.map(function(e9) {
      return Q2({}, D3.find(function(o4) {
        return o4.id === e9.id;
      }), { color: e9.color });
    }).filter(function(e9) {
      return Boolean(e9.id);
    });
    return { legendData: e8.map(function(e9) {
      return Q2({}, e9, { hidden: !o3.find(function(o4) {
        return o4.id === e9.id;
      }) });
    }).reverse(), series: o3 };
  }, [n5, D3, P4]), J2 = q.legendData, K2 = q.series, N = (0, import_react3.useCallback)(function(e8) {
    I2(function(o3) {
      return o3.indexOf(e8) > -1 ? o3.filter(function(o4) {
        return o4 !== e8;
      }) : [].concat(o3, [e8]);
    });
  }, []), U2 = function(e8) {
    var i4 = e8.series, t5 = e8.getPointColor, n6 = e8.getPointBorderColor, r6 = e8.formatX, a4 = e8.formatY;
    return (0, import_react3.useMemo)(function() {
      return i4.reduce(function(e9, o3) {
        return [].concat(e9, o3.data.filter(function(e11) {
          return null !== e11.position.x && null !== e11.position.y;
        }).map(function(i5, l4) {
          var s3 = { id: o3.id + "." + l4, index: e9.length + l4, serieId: o3.id, serieColor: o3.color, x: i5.position.x, y: i5.position.y };
          return s3.color = t5(o3), s3.borderColor = n6(s3), s3.data = Q2({}, i5.data, { xFormatted: r6(i5.data.x), yFormatted: a4(i5.data.y) }), s3;
        }));
      }, []);
    }, [i4, t5, n6, r6, a4]);
  }({ series: K2, getPointColor: O3, getPointBorderColor: V, formatX: L3, formatY: G }), Z2 = te({ componentId: E2, enableSlices: W4, points: U2, width: f, height: v3 });
  return { legendData: J2, toggleSerie: N, lineGenerator: oe({ curve: y }), areaGenerator: ie({ curve: y, yScale: j2, areaBaselineValue: b3 }), getColor: P4, series: K2, xScale: z4, yScale: j2, slices: Z2, points: U2 };
};
var ae = function(e7) {
  var o3 = e7.areaBlendMode, i4 = e7.areaOpacity, t5 = e7.color, n5 = e7.fill, r5 = e7.path, a3 = Ur(), l3 = a3.animate, s2 = a3.config, c = Fr(r5), u4 = useSpring({ color: t5, config: s2, immediate: !l3 });
  return (0, import_jsx_runtime3.jsx)(animated.path, { d: c, fill: n5 || u4.color, fillOpacity: i4, strokeWidth: 0, style: { mixBlendMode: o3 } });
};
var le = (0, import_react3.memo)(function(e7) {
  var o3 = e7.areaGenerator, i4 = e7.areaOpacity, t5 = e7.areaBlendMode, n5 = e7.lines.slice(0).reverse();
  return (0, import_jsx_runtime3.jsx)("g", { children: n5.map(function(e8) {
    return (0, import_jsx_runtime3.jsx)(ae, Q2({ path: o3(e8.data.map(function(e9) {
      return e9.position;
    })) }, Q2({ areaOpacity: i4, areaBlendMode: t5 }, e8)), e8.id);
  }) });
});
var se = (0, import_react3.memo)(function(e7) {
  var i4 = e7.lineGenerator, t5 = e7.points, n5 = e7.color, r5 = e7.thickness, a3 = (0, import_react3.useMemo)(function() {
    return i4(t5);
  }, [i4, t5]), l3 = Fr(a3);
  return (0, import_jsx_runtime3.jsx)(animated.path, { d: l3, fill: "none", strokeWidth: r5, stroke: n5 });
});
var ce2 = (0, import_react3.memo)(function(e7) {
  var o3 = e7.lines, i4 = e7.lineGenerator, t5 = e7.lineWidth;
  return o3.slice(0).reverse().map(function(e8) {
    var o4 = e8.id, n5 = e8.data, r5 = e8.color;
    return (0, import_jsx_runtime3.jsx)(se, { id: o4, points: n5.map(function(e9) {
      return e9.position;
    }), lineGenerator: i4, color: r5, thickness: t5 }, o4);
  });
});
var ue = (0, import_react3.memo)(function(e7) {
  var o3 = e7.slice, i4 = e7.slices, r5 = e7.axis, a3 = e7.debug, l3 = e7.tooltip, s2 = e7.isCurrent, c = e7.setCurrent, u4 = e7.onMouseEnter, d = e7.onMouseMove, h = e7.onMouseLeave, f = e7.onClick, v3 = e7.onTouchStart, p2 = e7.onTouchMove, m2 = e7.onTouchEnd, g3 = k(), y = g3.showTooltipFromEvent, x = g3.hideTooltip, b3 = (0, import_react3.useCallback)(function(e8) {
    y((0, import_react3.createElement)(l3, { slice: o3, axis: r5 }), e8, "right"), c(o3), u4 && u4(o3, e8);
  }, [y, l3, o3, r5, c, u4]), S2 = (0, import_react3.useCallback)(function(e8) {
    y((0, import_react3.createElement)(l3, { slice: o3, axis: r5 }), e8, "right"), d && d(o3, e8);
  }, [y, l3, o3, r5, d]), M2 = (0, import_react3.useCallback)(function(e8) {
    x(), c(null), h && h(o3, e8);
  }, [x, c, h, o3]), C4 = (0, import_react3.useCallback)(function(e8) {
    f && f(o3, e8);
  }, [o3, f]), w4 = (0, import_react3.useCallback)(function(e8) {
    y((0, import_react3.createElement)(l3, { slice: o3, axis: r5 }), e8, "right"), c(o3), v3 && v3(o3, e8);
  }, [r5, v3, c, y, o3, l3]), T3 = (0, import_react3.useCallback)(function(e8) {
    var t5 = e8.touches[0], a4 = document.elementFromPoint(t5.clientX, t5.clientY), s3 = null == a4 ? void 0 : a4.getAttribute("data-ref");
    if (s3) {
      var u5 = i4.find(function(e9) {
        return e9.id === s3;
      });
      u5 && (y((0, import_react3.createElement)(l3, { slice: u5, axis: r5 }), e8, "right"), c(u5));
    }
    p2 && p2(o3, e8);
  }, [r5, p2, c, y, o3, i4, l3]), k3 = (0, import_react3.useCallback)(function(e8) {
    x(), c(null), m2 && m2(o3, e8);
  }, [x, c, m2, o3]);
  return (0, import_jsx_runtime3.jsx)("rect", { x: o3.x0, y: o3.y0, width: o3.width, height: o3.height, stroke: "red", strokeWidth: a3 ? 1 : 0, strokeOpacity: 0.75, fill: "red", fillOpacity: s2 && a3 ? 0.35 : 0, onMouseEnter: b3, onMouseMove: S2, onMouseLeave: M2, onClick: C4, onTouchStart: w4, onTouchMove: T3, onTouchEnd: k3, "data-ref": o3.id });
});
var de2 = (0, import_react3.memo)(function(e7) {
  var o3 = e7.slices, i4 = e7.axis, t5 = e7.debug, n5 = e7.height, r5 = e7.tooltip, a3 = e7.current, l3 = e7.setCurrent, s2 = e7.onMouseEnter, c = e7.onMouseMove, u4 = e7.onMouseLeave, d = e7.onClick, h = e7.onTouchStart, f = e7.onTouchMove, v3 = e7.onTouchEnd;
  return o3.map(function(e8) {
    return (0, import_jsx_runtime3.jsx)(ue, { slice: e8, slices: o3, axis: i4, debug: t5, height: n5, tooltip: r5, setCurrent: l3, isCurrent: null !== a3 && a3.id === e8.id, onMouseEnter: s2, onMouseMove: c, onMouseLeave: u4, onClick: d, onTouchStart: h, onTouchMove: f, onTouchEnd: v3 }, e8.id);
  });
});
var he = (0, import_react3.memo)(function(e7) {
  var o3 = e7.points, i4 = e7.symbol, t5 = e7.size, n5 = e7.borderWidth, r5 = e7.enableLabel, a3 = e7.label, l3 = e7.labelYOffset, s2 = zt(), u4 = qn(a3), d = o3.slice(0).reverse().map(function(e8) {
    return { id: e8.id, x: e8.x, y: e8.y, datum: e8.data, fill: e8.color, stroke: e8.borderColor, label: r5 ? u4(e8) : null };
  });
  return (0, import_jsx_runtime3.jsx)("g", { children: d.map(function(e8) {
    return (0, import_jsx_runtime3.jsx)(vn, { x: e8.x, y: e8.y, datum: e8.datum, symbol: i4, size: t5, color: e8.fill, borderWidth: n5, borderColor: e8.stroke, label: e8.label, labelYOffset: l3, theme: s2 }, e8.id);
  }) });
});
var fe = (0, import_react3.memo)(function(e7) {
  var o3 = e7.points, i4 = e7.width, r5 = e7.height, a3 = e7.margin, l3 = e7.setCurrent, s2 = e7.onMouseEnter, c = e7.onMouseMove, u4 = e7.onMouseLeave, d = e7.onClick, h = e7.onTouchStart, f = e7.onTouchMove, v3 = e7.onTouchEnd, p2 = e7.tooltip, m2 = e7.debug, g3 = e7.enableTouchCrosshair, y = k(), x = y.showTooltipAt, b3 = y.hideTooltip, S2 = (0, import_react3.useCallback)(function(e8, o4) {
    x((0, import_react3.createElement)(p2, { point: e8 }), [e8.x + a3.left, e8.y + a3.top], "top"), s2 && s2(e8, o4);
  }, [x, p2, s2, a3]), M2 = (0, import_react3.useCallback)(function(e8, o4) {
    x((0, import_react3.createElement)(p2, { point: e8 }), [e8.x + a3.left, e8.y + a3.top], "top"), c && c(e8, o4);
  }, [x, p2, a3.left, a3.top, c]), C4 = (0, import_react3.useCallback)(function(e8, o4) {
    b3(), u4 && u4(e8, o4);
  }, [b3, u4]), w4 = (0, import_react3.useCallback)(function(e8, o4) {
    d && d(e8, o4);
  }, [d]), T3 = (0, import_react3.useCallback)(function(e8, o4) {
    x((0, import_react3.createElement)(p2, { point: e8 }), [e8.x + a3.left, e8.y + a3.top], "top"), h && h(e8, o4);
  }, [a3.left, a3.top, h, x, p2]), k3 = (0, import_react3.useCallback)(function(e8, o4) {
    x((0, import_react3.createElement)(p2, { point: e8 }), [e8.x + a3.left, e8.y + a3.top], "top"), f && f(e8, o4);
  }, [a3.left, a3.top, f, x, p2]), B3 = (0, import_react3.useCallback)(function(e8, o4) {
    b3(), v3 && v3(e8, o4);
  }, [v3, b3]);
  return (0, import_jsx_runtime3.jsx)(I, { nodes: o3, width: i4, height: r5, setCurrent: l3, onMouseEnter: S2, onMouseMove: M2, onMouseLeave: C4, onClick: w4, onTouchStart: T3, onTouchMove: k3, onTouchEnd: B3, enableTouchCrosshair: g3, debug: m2 });
});
var ve = On(function(e7) {
  var o3 = e7.data, t5 = e7.xScale, n5 = void 0 === t5 ? { type: "point" } : t5, a3 = e7.xFormat, l3 = e7.yScale, s2 = void 0 === l3 ? { type: "linear", min: 0, max: "auto" } : l3, u4 = e7.yFormat, d = e7.layers, h = void 0 === d ? ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"] : d, f = e7.curve, v3 = void 0 === f ? "linear" : f, p2 = e7.areaBaselineValue, m2 = void 0 === p2 ? 0 : p2, S2 = e7.colors, M2 = void 0 === S2 ? { scheme: "nivo" } : S2, C4 = e7.margin, w4 = e7.width, W4 = e7.height, E2 = e7.axisTop, G = e7.axisRight, P4 = e7.axisBottom, F = void 0 === P4 ? {} : P4, O3 = e7.axisLeft, V = void 0 === O3 ? {} : O3, R = e7.enableGridX, I2 = void 0 === R || R, A2 = e7.enableGridY, H4 = void 0 === A2 || A2, z4 = e7.gridXValues, j2 = e7.gridYValues, D3 = e7.lineWidth, q = void 0 === D3 ? 2 : D3, J2 = e7.enableArea, K2 = void 0 !== J2 && J2, N = e7.areaOpacity, $3 = void 0 === N ? 0.2 : N, _3 = e7.areaBlendMode, ee2 = void 0 === _3 ? "normal" : _3, oe2 = e7.enablePoints, ie2 = void 0 === oe2 || oe2, te2 = e7.pointSymbol, ne2 = e7.pointSize, ae2 = void 0 === ne2 ? 6 : ne2, se2 = e7.pointColor, ue2 = void 0 === se2 ? { from: "color" } : se2, ve2 = e7.pointBorderWidth, pe2 = void 0 === ve2 ? 0 : ve2, me2 = e7.pointBorderColor, ge2 = void 0 === me2 ? { theme: "background" } : me2, ye2 = e7.enablePointLabel, xe = void 0 !== ye2 && ye2, be = e7.pointLabel, Se = void 0 === be ? "data.yFormatted" : be, Me = e7.pointLabelYOffset, Ce = e7.defs, we = void 0 === Ce ? [] : Ce, Te = e7.fill, ke = void 0 === Te ? [] : Te, Be = e7.markers, We = e7.legends, Ee = void 0 === We ? [] : We, Le = e7.isInteractive, Ge = void 0 === Le || Le, Pe = e7.useMesh, Fe = void 0 !== Pe && Pe, Oe = e7.debugMesh, Ve = void 0 !== Oe && Oe, Ye = e7.onMouseEnter, Re = e7.onMouseMove, Ie = e7.onMouseLeave, Ae = e7.onClick, He = e7.onTouchStart, Xe2 = e7.onTouchMove, ze = e7.onTouchEnd, je = e7.tooltip, De = void 0 === je ? U : je, qe = e7.enableSlices, Je = void 0 !== qe && qe, Ke = e7.debugSlices, Ne = void 0 !== Ke && Ke, Qe = e7.sliceTooltip, Ue = void 0 === Qe ? Z : Qe, Ze = e7.enableCrosshair, $e = void 0 === Ze || Ze, _e = e7.crosshairType, eo = void 0 === _e ? "bottom-left" : _e, oo = e7.enableTouchCrosshair, io = void 0 !== oo && oo, to = e7.role, no = void 0 === to ? "img" : to, ro = wt(w4, W4, C4), ao = ro.margin, lo = ro.innerWidth, so = ro.innerHeight, co = ro.outerWidth, uo = ro.outerHeight, ho = re2({ data: o3, xScale: n5, xFormat: a3, yScale: s2, yFormat: u4, width: lo, height: so, colors: M2, curve: v3, areaBaselineValue: m2, pointColor: ue2, pointBorderColor: ge2, enableSlices: Je }), fo = ho.legendData, vo = ho.toggleSerie, po = ho.lineGenerator, mo = ho.areaGenerator, go = ho.series, yo = ho.xScale, xo = ho.yScale, bo = ho.slices, So = ho.points, Mo = zt(), Co = Xe(ue2, Mo), wo = Xe(ge2, Mo), To = (0, import_react3.useState)(null), ko = To[0], Bo = To[1], Wo = (0, import_react3.useState)(null), Eo = Wo[0], Lo = Wo[1], Go = { grid: (0, import_jsx_runtime3.jsx)(C2, { theme: Mo, width: lo, height: so, xScale: I2 ? yo : null, yScale: H4 ? xo : null, xValues: z4, yValues: j2 }, "grid"), markers: (0, import_jsx_runtime3.jsx)(Rn, { markers: Be, width: lo, height: so, xScale: yo, yScale: xo, theme: Mo }, "markers"), axes: (0, import_jsx_runtime3.jsx)(B, { xScale: yo, yScale: xo, width: lo, height: so, theme: Mo, top: E2, right: G, bottom: F, left: V }, "axes"), areas: null, lines: (0, import_jsx_runtime3.jsx)(ce2, { lines: go, lineGenerator: po, lineWidth: q }, "lines"), slices: null, points: null, crosshair: null, mesh: null, legends: Ee.map(function(e8, o4) {
    return (0, import_jsx_runtime3.jsx)(O, Q2({}, e8, { containerWidth: lo, containerHeight: so, data: e8.data || fo, theme: Mo, toggleSerie: e8.toggleSerie ? vo : void 0 }), "legend." + o4);
  }) }, Po = In(we, go, ke);
  return K2 && (Go.areas = (0, import_jsx_runtime3.jsx)(le, { areaGenerator: mo, areaOpacity: $3, areaBlendMode: ee2, lines: go }, "areas")), Ge && false !== Je && (Go.slices = (0, import_jsx_runtime3.jsx)(de2, { slices: bo, axis: Je, debug: Ne, height: so, tooltip: Ue, current: Eo, setCurrent: Lo, onMouseEnter: Ye, onMouseMove: Re, onMouseLeave: Ie, onClick: Ae, onTouchStart: He, onTouchMove: Xe2, onTouchEnd: ze }, "slices")), ie2 && (Go.points = (0, import_jsx_runtime3.jsx)(he, { points: So, symbol: te2, size: ae2, color: Co, borderWidth: pe2, borderColor: wo, enableLabel: xe, label: Se, labelYOffset: Me }, "points")), Ge && $e && (null !== ko && (Go.crosshair = (0, import_jsx_runtime3.jsx)(P, { width: lo, height: so, x: ko.x, y: ko.y, type: eo }, "crosshair")), null !== Eo && (Go.crosshair = (0, import_jsx_runtime3.jsx)(P, { width: lo, height: so, x: Eo.x, y: Eo.y, type: Je }, "crosshair"))), Ge && Fe && false === Je && (Go.mesh = (0, import_jsx_runtime3.jsx)(fe, { points: So, width: lo, height: so, margin: ao, current: ko, setCurrent: Bo, onMouseEnter: Ye, onMouseMove: Re, onMouseLeave: Ie, onClick: Ae, onTouchStart: He, onTouchMove: Xe2, onTouchEnd: ze, tooltip: De, enableTouchCrosshair: io, debug: Ve }, "mesh")), (0, import_jsx_runtime3.jsx)(gn, { defs: Po, width: co, height: uo, margin: ao, role: no, children: h.map(function(o4, i4) {
    return "function" == typeof o4 ? (0, import_jsx_runtime3.jsx)(import_react3.Fragment, { children: o4(Q2({}, e7, { innerWidth: lo, innerHeight: so, series: go, slices: bo, points: So, xScale: yo, yScale: xo, lineGenerator: po, areaGenerator: mo, currentPoint: ko, setCurrentPoint: Bo, currentSlice: Eo, setCurrentSlice: Lo })) }, i4) : Go[o4];
  }) });
});
var pe = function(e7) {
  return (0, import_jsx_runtime3.jsx)(It, { children: function(o3) {
    var i4 = o3.width, t5 = o3.height;
    return (0, import_jsx_runtime3.jsx)(ve, Q2({ width: i4, height: t5 }, e7));
  } });
};
var me = On(function(e7) {
  var o3 = (0, import_react3.useRef)(null), r5 = e7.width, a3 = e7.height, u4 = e7.margin, d = e7.pixelRatio, h = void 0 === d ? "undefined" != typeof window && window.devicePixelRatio || 1 : d, f = e7.data, v3 = e7.xScale, p2 = void 0 === v3 ? { type: "point" } : v3, m2 = e7.xFormat, y = e7.yScale, x = void 0 === y ? { type: "linear", min: 0, max: "auto" } : y, b3 = e7.yFormat, S2 = e7.curve, w4 = void 0 === S2 ? "linear" : S2, T3 = e7.layers, k3 = void 0 === T3 ? ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"] : T3, B3 = e7.colors, L3 = void 0 === B3 ? { scheme: "nivo" } : B3, P4 = e7.lineWidth, F = void 0 === P4 ? 2 : P4, O3 = e7.enableArea, Y3 = void 0 !== O3 && O3, R = e7.areaBaselineValue, I2 = void 0 === R ? 0 : R, A2 = e7.areaOpacity, H4 = void 0 === A2 ? 0.2 : A2, z4 = e7.enablePoints, j2 = void 0 === z4 || z4, D3 = e7.pointSize, q = void 0 === D3 ? 6 : D3, Z2 = e7.pointColor, $3 = void 0 === Z2 ? { from: "color" } : Z2, _3 = e7.pointBorderWidth, ee2 = void 0 === _3 ? 0 : _3, oe2 = e7.pointBorderColor, ie2 = void 0 === oe2 ? { theme: "background" } : oe2, te2 = e7.enableGridX, ne2 = void 0 === te2 || te2, ae2 = e7.gridXValues, le2 = e7.enableGridY, se2 = void 0 === le2 || le2, ce3 = e7.gridYValues, ue2 = e7.axisTop, de3 = e7.axisRight, he2 = e7.axisBottom, fe2 = void 0 === he2 ? {} : he2, ve2 = e7.axisLeft, pe2 = void 0 === ve2 ? {} : ve2, me2 = e7.legends, ge2 = void 0 === me2 ? [] : me2, ye2 = e7.isInteractive, xe = void 0 === ye2 || ye2, be = e7.debugMesh, Se = void 0 !== be && be, Me = e7.onMouseLeave, Ce = e7.onClick, we = e7.tooltip, Te = void 0 === we ? U : we, ke = e7.canvasRef, Be = wt(r5, a3, u4), We = Be.margin, Ee = Be.innerWidth, Le = Be.innerHeight, Ge = Be.outerWidth, Pe = Be.outerHeight, Fe = zt(), Oe = (0, import_react3.useState)(null), Ve = Oe[0], Ye = Oe[1], Re = re2({ data: f, xScale: p2, xFormat: m2, yScale: x, yFormat: b3, width: Ee, height: Le, colors: L3, curve: w4, areaBaselineValue: I2, pointColor: $3, pointBorderColor: ie2 }), Ie = Re.lineGenerator, Ae = Re.areaGenerator, He = Re.series, Xe2 = Re.xScale, ze = Re.yScale, je = Re.points, De = W3({ points: je, width: Ee, height: Le, debug: Se }), qe = De.delaunay, Je = De.voronoi;
  (0, import_react3.useEffect)(function() {
    ke && (ke.current = o3.current), o3.current.width = Ge * h, o3.current.height = Pe * h;
    var e8 = o3.current.getContext("2d");
    e8.scale(h, h), e8.fillStyle = Fe.background, e8.fillRect(0, 0, Ge, Pe), e8.translate(We.left, We.top), k3.forEach(function(o4) {
      if ("function" == typeof o4 && o4({ ctx: e8, innerWidth: Ee, innerHeight: Le, series: He, points: je, xScale: Xe2, yScale: ze, lineWidth: F, lineGenerator: Ie, areaGenerator: Ae, currentPoint: Ve, setCurrentPoint: Ye }), "grid" === o4 && Fe.grid.line.strokeWidth > 0 && (e8.lineWidth = Fe.grid.line.strokeWidth, e8.strokeStyle = Fe.grid.line.stroke, ne2 && z(e8, { width: Ee, height: Le, scale: Xe2, axis: "x", values: ae2 }), se2 && z(e8, { width: Ee, height: Le, scale: ze, axis: "y", values: ce3 })), "axes" === o4 && j(e8, { xScale: Xe2, yScale: ze, width: Ee, height: Le, top: ue2, right: de3, bottom: fe2, left: pe2, theme: Fe }), "areas" === o4 && true === Y3) {
        e8.save(), e8.globalAlpha = H4, Ae.context(e8);
        for (var i4 = He.length - 1; i4 >= 0; i4--)
          e8.fillStyle = He[i4].color, e8.beginPath(), Ae(He[i4].data.map(function(e9) {
            return e9.position;
          })), e8.fill();
        e8.restore();
      }
      if ("lines" === o4 && (Ie.context(e8), He.forEach(function(o5) {
        e8.strokeStyle = o5.color, e8.lineWidth = F, e8.beginPath(), Ie(o5.data.map(function(e9) {
          return e9.position;
        })), e8.stroke();
      })), "points" === o4 && true === j2 && q > 0 && je.forEach(function(o5) {
        e8.fillStyle = o5.color, e8.beginPath(), e8.arc(o5.x, o5.y, q / 2, 0, 2 * Math.PI), e8.fill(), ee2 > 0 && (e8.strokeStyle = o5.borderColor, e8.lineWidth = ee2, e8.stroke());
      }), "mesh" === o4 && true === Se && (z2(e8, Je), Ve && H2(e8, Je, Ve.index)), "legends" === o4) {
        var t5 = He.map(function(e9) {
          return { id: e9.id, label: e9.id, color: e9.color };
        }).reverse();
        ge2.forEach(function(o5) {
          H(e8, Q2({}, o5, { data: o5.data || t5, containerWidth: Ee, containerHeight: Le, theme: Fe }));
        });
      }
    });
  }, [o3, Ge, Pe, k3, Fe, Ie, He, Xe2, ze, ne2, ae2, se2, ce3, ue2, de3, fe2, pe2, ge2, je, j2, q, Ve]);
  var Ke = (0, import_react3.useCallback)(function(e8) {
    var i4 = Sn(o3.current, e8), t5 = i4[0], n5 = i4[1];
    if (!jn(We.left, We.top, Ee, Le, t5, n5))
      return null;
    var r6 = qe.find(t5 - We.left, n5 - We.top);
    return je[r6];
  }, [o3, We, Ee, Le, qe]), Ne = k(), Qe = Ne.showTooltipFromEvent, Ue = Ne.hideTooltip, Ze = (0, import_react3.useCallback)(function(e8) {
    var o4 = Ke(e8);
    Ye(o4), o4 ? Qe((0, import_react3.createElement)(Te, { point: o4 }), e8) : Ue();
  }, [Ke, Ye, Qe, Ue, Te]), $e = (0, import_react3.useCallback)(function(e8) {
    Ue(), Ye(null), Ve && Me && Me(Ve, e8);
  }, [Ue, Ye, Me]), _e = (0, import_react3.useCallback)(function(e8) {
    if (Ce) {
      var o4 = Ke(e8);
      o4 && Ce(o4, e8);
    }
  }, [Ke, Ce]);
  return (0, import_jsx_runtime3.jsx)("canvas", { ref: o3, width: Ge * h, height: Pe * h, style: { width: Ge, height: Pe, cursor: xe ? "auto" : "normal" }, onMouseEnter: xe ? Ze : void 0, onMouseMove: xe ? Ze : void 0, onMouseLeave: xe ? $e : void 0, onClick: xe ? _e : void 0 });
});
var ge = (0, import_react3.forwardRef)(function(e7, o3) {
  return (0, import_jsx_runtime3.jsx)(me, Q2({}, e7, { canvasRef: o3 }));
});
var ye = (0, import_react3.forwardRef)(function(e7, o3) {
  return (0, import_jsx_runtime3.jsx)(It, { children: function(i4) {
    var t5 = i4.width, n5 = i4.height;
    return (0, import_jsx_runtime3.jsx)(ge, Q2({ width: t5, height: n5 }, e7, { ref: o3 }));
  } });
});
export {
  ne as LINE_UNIQUE_ID_PREFIX,
  ve as Line,
  ge as LineCanvas,
  ee as LineCanvasDefaultProps,
  _2 as LineDefaultProps,
  pe as ResponsiveLine,
  ye as ResponsiveLineCanvas,
  ie as useAreaGenerator,
  re2 as useLine,
  oe as useLineGenerator,
  te as useSlices
};
//# sourceMappingURL=@nivo_line.js.map
